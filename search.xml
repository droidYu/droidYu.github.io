<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【学习笔记】之《第一行代码(第3版)》(Kotlin部分)</title>
      <link href="/notes/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81(%E7%AC%AC%E4%B8%89%E7%89%88)Kotlin%E9%83%A8%E5%88%86/"/>
      <url>/notes/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81(%E7%AC%AC%E4%B8%89%E7%89%88)Kotlin%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于《第一行代码(第3版)》包含了Android基础和Kotlin两部分知识，故笔者将笔记分为两篇：<br><a href="https://droidyu.github.io/notes/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81(%E7%AC%AC%E4%B8%89%E7%89%88)Android%E9%83%A8%E5%88%86/">【学习笔记】之《第一行代码(第3版)》(Android部分)</a><br><a href="https://droidyu.github.io/notes/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81(%E7%AC%AC%E4%B8%89%E7%89%88)Kotlin%E9%83%A8%E5%88%86/">【学习笔记】之《第一行代码(第3版)》(Kotlin部分)</a></p></blockquote><h1 id="Kotlin基础"><a href="#Kotlin基础" class="headerlink" title="Kotlin基础"></a>Kotlin基础</h1><h2 id="Kotlin的发展历程"><a href="#Kotlin的发展历程" class="headerlink" title="Kotlin的发展历程"></a>Kotlin的发展历程</h2><ul><li><p>2011年，JetBrains发布了Kotlin的第一个版本，并在2012年将其开源。</p></li><li><p>2016年Kotlin发布了1.0正式版，代表着Kotlin语言已经足够成熟和稳定了，并且JetBrains也在自家的旗舰IDE开发工具IntelliJ IDEA中加入了Kotlin的支持。</p></li><li><p>2017年Google宣布Kotlin正式成为Android开发一级语言，并且Android Studio也加入了对Kotlin的支持。</p></li><li><p>2019年Google正式宣布了Kotlin First，未来提供的官方API也将会以Kotlin版本为主。</p></li></ul><h2 id="Kotlin相比于Java的优势"><a href="#Kotlin相比于Java的优势" class="headerlink" title="Kotlin相比于Java的优势"></a>Kotlin相比于Java的优势</h2><ul><li><p>语法更加简洁，对于同样的功能，使用Kotlin开发的代码量可能会比使用Java开发的减少50%甚至更多。</p></li><li><p>语法更加高级，相比于Java比较老旧的语法，Kotlin增加了很多现代高级语言的语法特性，使得开发效率大大提升。</p></li><li><p>语言更加安全，Kotlin几乎杜绝了空指针这个全球崩溃率最高的异常。</p></li><li><p>和Java是100%兼容的，Kotlin可以直接调用使用Java编写的代码，也可以无缝使用Java第三方的开源库。这使得Kotlin在加入了诸多新特性的同时，还继承了Java的全部财富。</p></li></ul><h2 id="变量和函数"><a href="#变量和函数" class="headerlink" title="变量和函数"></a>变量和函数</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>val（value的简写的简写）用来声明一个不可变的变量，这种变量在初始赋值之后就再也不能重新赋值，对应Java中的final变量。</li><li>var（variable的简写的简写）用来声明一个可变的变量，这种变量在初始赋值之后仍然可以再被重新赋值复制，对应Java中的非final变量。</li></ul><table><thead><tr><th>Java基本数据类型</th><th>Kotlin对象数据类型</th><th>数据类型说明</th></tr></thead><tbody><tr><td>int</td><td>Int</td><td>整型</td></tr><tr><td>long</td><td>Long</td><td>长整型</td></tr><tr><td>short</td><td>Short</td><td>短整型</td></tr><tr><td>float</td><td>Float</td><td>单精度浮点型</td></tr><tr><td>double</td><td>Double</td><td>双精度浮点型</td></tr><tr><td>boolean</td><td>Boolean</td><td>布尔型</td></tr><tr><td>char</td><td>Char</td><td>字符型</td></tr><tr><td>byte</td><td>Byte</td><td>字节型</td></tr></tbody></table><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>定义一个函数的语法规则如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">methodName</span><span class="params">(param1: <span class="type">Int</span>, param2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;      <span class="keyword">return</span> <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p>当一个函数的函数体中只有一行代码时，可以使用单行代码函数的语法糖：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">methodName</span><span class="params">(param1: <span class="type">Int</span>, param2: <span class="type">Int</span>)</span></span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="逻辑控制"><a href="#逻辑控制" class="headerlink" title="逻辑控制"></a>逻辑控制</h2><h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><p>Kotlin中的if语句相比于Java有一个额外的功能：它是可以有返回值的，返回值就是if语句每一个条件中最后一行代码的返回值。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;    <span class="keyword">val</span> value = <span class="keyword">if</span> (num1 &gt; num2) &#123;        num1    &#125; <span class="keyword">else</span> &#123;        num2    &#125;    <span class="keyword">return</span> value&#125;</span><br></pre></td></tr></table></figure><p>仔细观察上述代码，你会发现value其实是一个多余的变量，我们可以直接将if语句返回，这样代码将会变得更加精简，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;    <span class="keyword">return</span> <span class="keyword">if</span> (num1 &gt; num2) &#123;        num1    &#125; <span class="keyword">else</span> &#123;        num2    &#125;&#125;</span><br></pre></td></tr></table></figure><p>当一个函数只有一行代码时，可以省略函数体部分，直接将这一行代码使用等号串连在函数定义的尾部。虽然largerNumber()函数不止只有一行代码，但是它和只有一行代码的作用是相同的，只是return了一下if语句的返回值而已，符合该语法糖的使用条件。那么我们就可以将代码进一步精简：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span> (num1 &gt; num2) &#123;    num1&#125; <span class="keyword">else</span> &#123;    num2&#125;</span><br></pre></td></tr></table></figure><p>最后，还可以将上述代码再精简一下，直接压缩成一行代码：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span> (num1 &gt; num2) num1 <span class="keyword">else</span> num2</span><br></pre></td></tr></table></figure><h3 id="when条件语句"><a href="#when条件语句" class="headerlink" title="when条件语句"></a>when条件语句</h3><p>当需要判断的条件非常多的时候，可以考虑使用when语句来替代if语句。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">(name: <span class="type">String</span>)</span></span> = <span class="keyword">when</span> (name) &#123;    <span class="string">&quot;Tom&quot;</span> -&gt; <span class="number">86</span>    <span class="string">&quot;Jim&quot;</span> -&gt; <span class="number">77</span>    <span class="string">&quot;Jack&quot;</span> -&gt; <span class="number">95</span>    <span class="string">&quot;Lily&quot;</span> -&gt; <span class="number">100</span>    <span class="keyword">else</span> -&gt; <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p>除了精确匹配之外，when语句还允许进行类型匹配。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">checkNumber</span><span class="params">(num: <span class="type">Number</span>)</span></span> &#123;    <span class="keyword">when</span> (num) &#123;        <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; println(<span class="string">&quot;number is Int&quot;</span>)        <span class="keyword">is</span> <span class="built_in">Double</span> -&gt; println(<span class="string">&quot;number is Double&quot;</span>)        <span class="keyword">else</span> -&gt; println(<span class="string">&quot;number not support&quot;</span>)    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="for-in循环语句"><a href="#for-in循环语句" class="headerlink" title="for-in循环语句"></a>for-in循环语句</h3><p>我们可以使用如下Kotlin代码来表示一个区间：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">0.</span><span class="number">.10</span></span><br></pre></td></tr></table></figure><p>上述代码表示创建了一个0到10的区间，并且两端都是闭区间，这意味着0到10这两个端点都是包含在区间中的，用数学的方式表达出来就是[0, 10]。</p><p>也可以使用until关键字来创建一个左闭右开的区间：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">0</span> until <span class="number">10</span></span><br></pre></td></tr></table></figure><p>上述代码表示创建了一个0到10的左闭右开区间，它的数学表达方式是[0, 10)。有了区间之后，我们就可以通过for-in循环来遍历这个区间：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.10</span>) &#123;        println(i)    &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果你想跳过其中的一些元素，可以使用step关键字：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">10</span> step <span class="number">2</span>) &#123;        println(i)    &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果你想创建一个降序的区间，可以使用downTo关键字：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">10</span> downTo <span class="number">1</span>) &#123;        println(i)    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>可以使用如下代码定义一个类，以及声明它所拥有的字段和函数：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;    <span class="keyword">var</span> name = <span class="string">&quot;&quot;</span>    <span class="keyword">var</span> age = <span class="number">0</span>    <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span> &#123;        println(name + <span class="string">&quot; is eating. He is &quot;</span> + age + <span class="string">&quot; years old.&quot;</span>)    &#125;&#125;</span><br></pre></td></tr></table></figure><p>然后使用如下代码创建对象，并对对象进行操作：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;    <span class="keyword">val</span> p = Person()    p.name = <span class="string">&quot;Jack&quot;</span>    p.age = <span class="number">19</span>    p.eat()&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>Kotlin中一个类默认是不可以被继承的，如果想要让一个类可以被继承，需要主动声明open关键字：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要让另一个类去继承Person类，则需要使用冒号关键字：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> : <span class="type">Person</span></span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> sno = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> grade = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在Student类中就自动拥有了Person类中的字段和函数，还可以定义自己独有的字段和函数。</p><p>Kotlin中定义接口的关键字和Java中是相同的，都是使用的interface：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Study</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">readBooks</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">doHomework</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而Kotlin中实现接口的关键字变量了冒号，和继承使用的是同样的关键字：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>) : Study &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">readBooks</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(name + <span class="string">&quot; is reading.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doHomework</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(name + <span class="string">&quot; is doing homework.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h3><p>Kotlin中使用data关键字可以定义一个数据类：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Cellphone</span></span>(<span class="keyword">val</span> brand: String, <span class="keyword">val</span> price: <span class="built_in">Double</span>)</span><br></pre></td></tr></table></figure><p>Kotlin会根据数据类的主构造函数中的参数将equals()、hashCode()、toString()等固定且无实际逻辑意义的方法自动生成，从而大大简少了开发的工作量。</p><h3 id="单例类"><a href="#单例类" class="headerlink" title="单例类"></a>单例类</h3><p>Kotlin中使用object关键字可以定义一个单例类：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> Singleton &#123;    <span class="function"><span class="keyword">fun</span> <span class="title">singletonTest</span><span class="params">()</span></span> &#123;        println(<span class="string">&quot;singletonTest is called.&quot;</span>)    &#125;&#125;</span><br></pre></td></tr></table></figure><p>而调用单例类中的函数比较类似于Java中静态方法的调用方式：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Singleton.singletonTest()</span><br></pre></td></tr></table></figure><p>这种写法虽然看上去像是静态方法的调用，但其实Kotlin在背后自动帮我们创建了一个Singleton类的实例，并且保证全局只会存在一个Singleton实例。</p><h2 id="Lambda编程"><a href="#Lambda编程" class="headerlink" title="Lambda编程"></a>Lambda编程</h2><h3 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h3><p>使用如下代码可以初始化一个List集合：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用如下代码可以初始化一个Set集合：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="keyword">set</span> = setOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用如下代码可以初始化一个Map集合：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> map = mapOf(<span class="string">&quot;Apple&quot;</span> to <span class="number">1</span>, <span class="string">&quot;Banana&quot;</span> to <span class="number">2</span>, <span class="string">&quot;Orange&quot;</span> to <span class="number">3</span>, <span class="string">&quot;Pear&quot;</span> to <span class="number">4</span>, <span class="string">&quot;Grape&quot;</span> to <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda就是一小段可以作为参数传递的代码。正常情况下，我们向某个函数传参时只能传入变量，而借助Lambda却允许传入一小段代码。</p><p>我们来看一下Lambda表达式的语法结构：</p><p>{参数名1: 参数类型, 参数名2: 参数类型 -&gt; 函数体}</p><p>首先最外层是一对大括号，如果有参数传入到Lambda表达式中的话，我们还需要声明参数列表，参数列表的结尾使用一个-&gt;符号，表示参数列表的结束以及函数体的开始，函数体中可以编写任意行代码，并且最后一行代码会自动作为Lambda表达式的返回值。</p><h3 id="集合的函数式API"><a href="#集合的函数式API" class="headerlink" title="集合的函数式API"></a>集合的函数式API</h3><p>集合中的map函数是最常用的一种函数式API，它用于将集合中的每个元素都映射成一个另外的值，映射的规则在Lambda表达式中指定，最终生成一个新的集合。比如，这里我们希望让所有的水果名都变成大写模式，就可以这样写：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>)    <span class="keyword">val</span> newList = list.map(&#123; fruit: String -&gt; fruit.toUpperCase() &#125;)    <span class="keyword">for</span> (fruit <span class="keyword">in</span> newList) &#123;        println(fruit)    &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>当Lambda参数是函数的最后一个参数时，可以将Lambda表达式移到函数括号的外面。</p></li><li><p>如果Lambda参数是函数的唯一一个参数的话，还可以将函数的括号省略。</p></li><li><p>由于Kotlin拥有出色的类型推导机制，Lambda表达式中的参数列表其实在大多数情况下也不必声明参数类型。</p></li><li><p>当Lambda表达式的参数列表中只有一个参数时，也不必声明参数名，而是可以使用it关键字来代替。<br>因此，Lambda表达式的写法可以进一步简化成如下方式：</p></li></ul><p>因此，Lambda表达式的写法可以进一步简化成如下方式：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">newList = list.map &#123; it.toUpperCase() &#125;</span><br></pre></td></tr></table></figure><h3 id="Java函数式API"><a href="#Java函数式API" class="headerlink" title="Java函数式API"></a>Java函数式API</h3><p>如果我们在Kotlin代码中调用了一个Java方法，并且该方法接收一个Java单抽象方法接口参数，就可以使用函数式API。Java单抽象方法接口指的是接口中只有一个待实现方法，如果接口中有多个待实现方法，则无法使用函数式API。</p><p>举个例子，Android中有一个极为常用的点击事件接口OnClickListener，其定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span> </span>&#123;     <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>;&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这是一个单抽象方法接口。假设现在我们拥有一个按钮button的实例，就可以使用函数式API的写法来注册这个按钮的点击事件：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">button.setOnClickListener &#123; v -&gt;&#125;</span><br></pre></td></tr></table></figure><h2 id="空指针检查"><a href="#空指针检查" class="headerlink" title="空指针检查"></a>空指针检查</h2><h3 id="空指针检查-1"><a href="#空指针检查-1" class="headerlink" title="空指针检查"></a>空指针检查</h3><p>空指针是一种不受编程语言检查的运行时异常，只能由程序员主动通过逻辑判断来避免，但即使是最出色的程序员，也不可能将所有潜在的空指针异常全部考虑到。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStudy</span><span class="params">(Study study)</span> </span>&#123;    study.readBooks();    study.doHomework();&#125;</span><br></pre></td></tr></table></figure><p>这段Java代码安全吗？不一定，因为这要取决于调用方传入的参数是什么，如果我们向doStudy()方法传入了一个null参数，那么毫无疑问这里就会发生空指针异常。因此，更加稳妥的做法是在调用参数的方法之前先进行一个判空处理，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStudy</span><span class="params">(Study study)</span> </span>&#123;    <span class="keyword">if</span> (study != <span class="keyword">null</span>) &#123;        study.readBooks();        study.doHomework();    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="可空类型系统"><a href="#可空类型系统" class="headerlink" title="可空类型系统"></a>可空类型系统</h3><p>Kotlin中引入了一个可空类型系统的概念，它利用编译时判空检查的机制几乎杜绝了空指针异常。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>)</span></span> &#123;    study.readBooks()    study.doHomework()&#125;</span><br></pre></td></tr></table></figure><p>这段代码看上去和刚才的Java版本并没有什么区别，但实际上它是没有空指针风险的，因为Kotlin默认所有的参数和变量都不可为空，所以这里传入的Study参数也一定不会为空，可以放心地调用它的任何函数。</p><p>Kotlin提供了另外一套可为空的类型系统，就是在类名的后面加上一个问号。比如，Int表示不可为空的整型，而Int?就表示可为空的整型；String表示不可为空的字符串，而String?就表示可为空的字符串。</p><p>使用可为空的类型系统时，需要在编译时期就把所有的空指针异常都处理掉才行。</p><h3 id="判空辅助工具"><a href="#判空辅助工具" class="headerlink" title="判空辅助工具"></a>判空辅助工具</h3><p>Kotlin提供了一系列的辅助工具，使开发者能够更轻松地进行判空处理。</p><p>?. 操作符表示当对象不为空时正常调用相应的方法，当对象为空时则什么都不做。比如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a != <span class="literal">null</span>) &#123;    a.doSomething()&#125;</span><br></pre></td></tr></table></figure><p>这段代码使用?.操作符就可以简化成：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">a?.doSomething()</span><br></pre></td></tr></table></figure><p>?: 操作符表示如果左边表达式的结果不为空就返回左边表达式的结果，否则就返回右边表达式的结果。比如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> c = <span class="keyword">if</span> (a ! = <span class="literal">null</span>) &#123;    a&#125; <span class="keyword">else</span> &#123;    b&#125;</span><br></pre></td></tr></table></figure><p>这段代码的逻辑使用?:操作符就可以简化成：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> c = a ?: b</span><br></pre></td></tr></table></figure><p>结合使用?.操作符和let函数也可以对多次重复调用的某个变量统一进行判空处理：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>?)</span></span> &#123;    study?.let &#123;        it.readBooks()        it.doHomework()    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h2><h3 id="字符串内嵌表达式"><a href="#字符串内嵌表达式" class="headerlink" title="字符串内嵌表达式"></a>字符串内嵌表达式</h3><p>在Kotlin中，我们可以直接将表达式写在字符串里面，即使是构建非常复杂的字符串，也会变得轻而易举。</p><p>Kotlin中字符串内嵌表达式的语法规则如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;hello, <span class="subst">$&#123;obj.name&#125;</span>. nice to meet you!&quot;</span></span><br></pre></td></tr></table></figure><p>当表达式中仅有一个变量的时候，还可以将两边的大括号省略：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;hello, <span class="variable">$name</span>. nice to meet you!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="函数的参数默认值"><a href="#函数的参数默认值" class="headerlink" title="函数的参数默认值"></a>函数的参数默认值</h3><p>Kotlin允许在定义函数的时候给任意参数设定一个默认值，这样当调用此函数时就不会强制要求调用方为此参数传值，在没有传值的情况下会自动使用参数的默认值。语法格式如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printParams</span><span class="params">(num: <span class="type">Int</span>, str: <span class="type">String</span> = <span class="string">&quot;hello&quot;</span>)</span></span> &#123;    println(<span class="string">&quot;num is <span class="variable">$num</span> , str is <span class="variable">$str</span>&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>这里给printParams()函数的第二个参数设定了一个默认值，这样当调用printParams()函数时，可以选择给第二个参数传值，也可以选择不传，在不传的情况下就会自动使用默认值。</p><h1 id="标准函数和静态方法"><a href="#标准函数和静态方法" class="headerlink" title="标准函数和静态方法"></a>标准函数和静态方法</h1><h2 id="标准函数"><a href="#标准函数" class="headerlink" title="标准函数"></a>标准函数</h2><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p>with函数接收两个参数：第一个参数可以是一个任意类型的对象，第二个参数是一个Lambda表达式。with函数会在Lambda表达式中提供第一个参数对象的上下文，并使用Lambda表达式中的最后一行代码作为返回值返回。</p><p>示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> result = with(obj) &#123;      <span class="comment">// 这里是obj的上下文</span>      <span class="string">&quot;value&quot;</span> <span class="comment">// with函数的返回值</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p>run函数的用法和使用场景其实和with函数是非常类似的，只是稍微做了一些语法改动而已。首先run函数是不能直接调用的，而是一定要调用某个对象的run函数才行；其次run函数只接收一个Lambda参数，并且会在Lambda表达式中提供调用对象的上下文。其他方面和with函数是一样的，包括也会使用Lambda表达式中的最后一行代码作为返回值返回。</p><p>示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> result = obj.run &#123;      <span class="comment">// 这里是obj的上下文</span>      <span class="string">&quot;value&quot;</span> <span class="comment">// run函数的返回值</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>apply函数和run函数也是极其类似的，都是要在某个对象上调用，并且只接收一个Lambda参数，也会在Lambda表达式中提供调用对象的上下文，但是apply函数无法指定返回值，而是会自动返回调用对象本身。</p><p>示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> result = obj.apply &#123;      <span class="comment">// 这里是obj的上下文</span>&#125;<span class="comment">// result == obj</span></span><br></pre></td></tr></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>Kotlin没有直接定义静态方法的关键字，但是提供了一些语法特性来支持类似于静态方法调用的写法，如单例类，companion object等，这些语法特性基本可以满足我们平时的开发需求了。</p><p>然而如果你确确实实需要定义真正的静态方法， Kotlin仍然提供了两种实现方式：注解和顶层方法。</p><h3 id="伴生对象-JvmStatic注解"><a href="#伴生对象-JvmStatic注解" class="headerlink" title="伴生对象+JvmStatic注解"></a>伴生对象+JvmStatic注解</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;        <span class="meta">@JvmStatic</span>        <span class="function"><span class="keyword">fun</span> <span class="title">doAction</span><span class="params">()</span></span> &#123;            println(<span class="string">&quot;do action2&quot;</span>)        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="顶层方法"><a href="#顶层方法" class="headerlink" title="顶层方法"></a>顶层方法</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;    println(<span class="string">&quot;do something&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><h1 id="延迟初始化和密封类"><a href="#延迟初始化和密封类" class="headerlink" title="延迟初始化和密封类"></a>延迟初始化和密封类</h1><h2 id="变量延迟初始化"><a href="#变量延迟初始化" class="headerlink" title="变量延迟初始化"></a>变量延迟初始化</h2><p>延迟初始化使用的是lateinit关键字，它可以告诉Kotlin编译器，我会在晚些时候对这个变量进行初始化，这样就不用在一开始的时候将它赋值为null了。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>(), View.OnClickListener &#123;    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> adapter: MsgAdapter    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;        …        adapter = MsgAdapter(msgList)        …    &#125;    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(v: <span class="type">View</span>?)</span></span> &#123;        …        adapter.notifyItemInserted(msgList.size - <span class="number">1</span>)        …    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h2><p>当在when语句中传入一个密封类变量作为条件时，Kotlin编译器会自动检查该密封类有哪些子类，并强制要求你将每一个子类所对应的条件全部处理。<br>这样就可以保证，即使没有编写else条件，也不可能会出现漏写条件分支的情况。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span></span><span class="class"><span class="keyword">class</span> <span class="title">Success</span></span>(<span class="keyword">val</span> msg: String) : Result()<span class="class"><span class="keyword">class</span> <span class="title">Failure</span></span>(<span class="keyword">val</span> error: Exception) : Result()</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getResultMsg</span><span class="params">(result: <span class="type">Result</span>)</span></span> = <span class="keyword">when</span> (result) &#123;    <span class="keyword">is</span> Success -&gt; result.msg    <span class="keyword">is</span> Failure -&gt; <span class="string">&quot;Error is <span class="subst">$&#123;result.error.message&#125;</span>&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="扩展函数和运算符重载"><a href="#扩展函数和运算符重载" class="headerlink" title="扩展函数和运算符重载"></a>扩展函数和运算符重载</h1><h2 id="扩展函数"><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h2><p>扩展函数表示即使在不修改某个类的源码的情况下，仍然可以打开这个类，向该类添加新的函数。</p><p>其语法结构非常简单，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> ClassName.<span class="title">methodName</span><span class="params">(param1: <span class="type">Int</span>, param2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;      <span class="keyword">return</span> <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p>Kotlin的运算符重载允许我们让任意两个对象进行相加，或者是进行更多其他的运算操作。</p><p>这里以加号运算符为例，如果想要实现让两个对象相加的功能，那么它的语法结构如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span> </span>&#123;      <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(obj: <span class="type">Obj</span>)</span></span>: Obj &#123;            <span class="comment">// 处理相加的逻辑</span>      &#125;&#125;</span><br></pre></td></tr></table></figure><p>语法糖表达式和实际调用函数对照表如下所示</p><table><thead><tr><th>语法糖表达式</th><th>实际调用函数</th></tr></thead><tbody><tr><td>a + b</td><td>a.plus(b)</td></tr><tr><td>a - b</td><td>a.minus(b)</td></tr><tr><td>a * b</td><td>a.times(b)</td></tr><tr><td>a / b</td><td>a.div(b)</td></tr><tr><td>a % b</td><td>a.rem(b)</td></tr><tr><td>a++</td><td>a.inc()</td></tr><tr><td>a–</td><td>a.dec()</td></tr><tr><td>+a</td><td>a.unaryPlus()</td></tr><tr><td>-a</td><td>a.unaryMinus()</td></tr><tr><td>!a</td><td>a.not()</td></tr><tr><td>a == b</td><td>a.equals(b)</td></tr><tr><td>a &gt; b , a &lt; b ,  a &gt;= b , a &lt;= b</td><td>a.compareTo(b)</td></tr><tr><td>a .. b</td><td>a.rangeTo(b)</td></tr><tr><td>a[b]</td><td>a.get(b)</td></tr><tr><td>a[]b = c</td><td>a.set(b, c)</td></tr><tr><td>a in b</td><td>b.contains(a)</td></tr></tbody></table><h1 id="高阶函数详解"><a href="#高阶函数详解" class="headerlink" title="高阶函数详解"></a>高阶函数详解</h1><h2 id="定义高阶函数"><a href="#定义高阶函数" class="headerlink" title="定义高阶函数"></a>定义高阶函数</h2><p>如果一个函数接收另一个函数作为参数，或者返回值的类型是另一个函数，那么该函数就称为高阶函数。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">example</span><span class="params">(func: (<span class="type">String</span>, <span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;      func(<span class="string">&quot;hello&quot;</span>, <span class="number">123</span>)&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里的example()函数接收了一个函数类型的参数，因此example()函数就是一个高阶函数。而调用一个函数类型的参数，它的语法类似于调用一个普通的函数，只需要在参数名的后面加上一对括号，并在括号中传入必要的参数即可。</p><h2 id="内联函数的作用"><a href="#内联函数的作用" class="headerlink" title="内联函数的作用"></a>内联函数的作用</h2><p>内联函数可以将使用Lambda表达式带来的运行时开销完全消除。它的工作原理并不复杂，就是Kotlin编译器会将内联函数中的代码在编译的时候自动替换到调用它的地方，这样也就不存在运行时的开销了。</p><p>定义内联函数很简单，只需要在定义高阶函数时加上inline关键字的声明即可，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">num1AndNum2</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>, operation: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;    <span class="keyword">val</span> result = operation(num1, num2)    <span class="keyword">return</span> result&#125;</span><br></pre></td></tr></table></figure><h1 id="高阶函数的应用"><a href="#高阶函数的应用" class="headerlink" title="高阶函数的应用"></a>高阶函数的应用</h1><h1 id="泛型和委托"><a href="#泛型和委托" class="headerlink" title="泛型和委托"></a>泛型和委托</h1><h1 id="使用infix函数构建更可读的语法"><a href="#使用infix函数构建更可读的语法" class="headerlink" title="使用infix函数构建更可读的语法"></a>使用infix函数构建更可读的语法</h1><h1 id="范型的高级特性"><a href="#范型的高级特性" class="headerlink" title="范型的高级特性"></a>范型的高级特性</h1><h1 id="使用协程编写高效的并发程序"><a href="#使用协程编写高效的并发程序" class="headerlink" title="使用协程编写高效的并发程序"></a>使用协程编写高效的并发程序</h1><h1 id="编写好用的工具方法"><a href="#编写好用的工具方法" class="headerlink" title="编写好用的工具方法"></a>编写好用的工具方法</h1><h1 id="使用DSL构建专有的语法结构"><a href="#使用DSL构建专有的语法结构" class="headerlink" title="使用DSL构建专有的语法结构"></a>使用DSL构建专有的语法结构</h1><h1 id="Java与Kotlin代码之间的转换"><a href="#Java与Kotlin代码之间的转换" class="headerlink" title="Java与Kotlin代码之间的转换"></a>Java与Kotlin代码之间的转换</h1><p>（持续更新中。。。）</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 《第一行代码(第3版)》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习笔记】之《第一行代码(第3版)》(Android部分)</title>
      <link href="/notes/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81(%E7%AC%AC%E4%B8%89%E7%89%88)Android%E9%83%A8%E5%88%86/"/>
      <url>/notes/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81(%E7%AC%AC%E4%B8%89%E7%89%88)Android%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于《第一行代码(第3版)》包含了Android基础和Kotlin两部分知识，故笔者将笔记分为两篇：<br><a href="https://droidyu.github.io/notes/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81(%E7%AC%AC%E4%B8%89%E7%89%88)Android%E9%83%A8%E5%88%86/">【学习笔记】之《第一行代码(第3版)》(Android部分)</a><br><a href="https://droidyu.github.io/notes/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81(%E7%AC%AC%E4%B8%89%E7%89%88)Kotlin%E9%83%A8%E5%88%86/">【学习笔记】之《第一行代码(第3版)》(Kotlin部分)</a></p></blockquote><h1 id="开始启程，你的第一行Android代码"><a href="#开始启程，你的第一行Android代码" class="headerlink" title="开始启程，你的第一行Android代码"></a>开始启程，你的第一行Android代码</h1><h2 id="Android系统架构"><a href="#Android系统架构" class="headerlink" title="Android系统架构"></a>Android系统架构</h2><p><img src="https://pic.imgdb.cn/item/61ed33632ab3f51d9139a269.png"></p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>所有安装在手机上的应用程序都是属于这一层，比如系统自带的联系人、短信等程序。</p><h3 id="应用框架层"><a href="#应用框架层" class="headerlink" title="应用框架层"></a>应用框架层</h3><p>这一层主要提供了构建应用程序时可能用到的各种API，Android自带的一些核心应用就是使用这些API完成的，开发者也可以通过使用这些API来构建自己的应用程序。</p><h3 id="系统运行库层"><a href="#系统运行库层" class="headerlink" title="系统运行库层"></a>系统运行库层</h3><p>这一层通过一些C/C++库来为Android系统提供了主要的特性支持。在这一层还包括Android运行时库和Dalvik虚拟机（5.0系统之后改为ART），它使得每个Android应用都能运行在独立的进程中，并拥有一个自己的虚拟机实例。<br>相较于JVM，Dalvik和ART是专门为移动设备定制的，它针对手机内存、CPU性能有限等情况做了优化处理。</p><h3 id="Linux内核层"><a href="#Linux内核层" class="headerlink" title="Linux内核层"></a>Linux内核层</h3><p>Android系统是基于Linux内核的，这一层为Android设备的各种硬件提供了底层的驱动，如显示驱动、音频驱动、照相机驱动、蓝牙驱动、Wi-Fi驱动、电源管理等。</p><h1 id="探究新语言，快速入门Kotlin编程"><a href="#探究新语言，快速入门Kotlin编程" class="headerlink" title="探究新语言，快速入门Kotlin编程"></a>探究新语言，快速入门Kotlin编程</h1><p>详见<a href="https://droidyu.github.io/notes/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81(%E7%AC%AC%E4%B8%89%E7%89%88)Kotlin%E9%83%A8%E5%88%86/">【学习笔记】之《第一行代码(第3版)》(Kotlin部分)</a></p><h1 id="先从看得见的入手，探究Activity"><a href="#先从看得见的入手，探究Activity" class="headerlink" title="先从看得见的入手，探究Activity"></a>先从看得见的入手，探究Activity</h1><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p>Intent是Android程序中各组件之间进行交互的一种重要方式，它不仅可以指明当前组件想要执行的动作，还可以在不同组件之间传递数据。</p><h3 id="显式Intent"><a href="#显式Intent" class="headerlink" title="显式Intent"></a>显式Intent</h3><p>显式Intent可以用于明确指定启动某个Activity，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">button1.setOnClickListener &#123;    <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, SecondActivity::<span class="keyword">class</span>.java)    startActivity(intent)&#125;</span><br></pre></td></tr></table></figure><h3 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h3><p>隐式Intent并不明确指出想要启动哪一个Activity，而是指定了一系列更为抽象的action和category等信息，然后交由系统去分析这个Intent，并帮我们找出合适的Activity去启动。<br>比如你的应用程序中需要展示一个网页，这时没有必要自己去实现一个浏览器，只需要调用系统的浏览器来打开这个网页就行了。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">button1.setOnClickListener &#123;    <span class="keyword">val</span> intent = Intent(Intent.ACTION_VIEW)    intent.<span class="keyword">data</span> = Uri.parse(<span class="string">&quot;https://www.baidu.com&quot;</span>)    startActivity(intent)&#125;</span><br></pre></td></tr></table></figure><h2 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h2><p><img src="https://pic.imgdb.cn/item/61ee96e62ab3f51d9171a537.png"></p><ul><li><p>onCreate() 这个方法在Activity第一次被创建的时候调用。</p></li><li><p>onStart() 这个方法在Activity由不可见变为可见的时候调用。</p></li><li><p>onResume() 这个方法在Activity准备好和用户进行交互的时候调用。</p></li><li><p>onPause() 这个方法在系统准备去启动或者恢复另一个Activity的时候调用。</p></li><li><p>onStop() 这个方法在Activity完全不可见的时候调用。</p></li><li><p>onDestroy() 这个方法在Activity被销毁之前调用。</p></li><li><p>onRestart() 这个方法在Activity由停止状态变为运行状态之前调用，也就是Activity被重新启动了。</p><h2 id="Activity的启动模式"><a href="#Activity的启动模式" class="headerlink" title="Activity的启动模式"></a>Activity的启动模式</h2><h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h3><p><img src="https://pic.imgdb.cn/item/61ee97912ab3f51d91723e39.png"></p></li></ul><p>standard是Activity默认的启动模式，在不进行显式指定的情况下，所有Activity都会自动使用这种启动模式。</p><p>在standard模式下，每当启动一个新的Activity，它就会在返回栈中入栈，并处于栈顶的位置。</p><p>对于使用standard模式的Activity，系统不会在乎这个Activity是否已经在返回栈中存在，每次启动都会创建一个该Activity的新实例。</p><h3 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h3><p><img src="https://pic.imgdb.cn/item/61ee98502ab3f51d9172ef82.png"></p><p>当Activity的启动模式指定为singleTop，在启动Activity时如果发现返回栈的栈顶已经是该Activity，则认为可以直接使用它，不会再创建新的Activity实例。</p><h3 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h3><p><img src="https://pic.imgdb.cn/item/61ee988e2ab3f51d91732ecf.png"><br>当Activity的启动模式指定为singleTask，每次启动该Activity时，系统首先会在返回栈中检查是否存在该Activity的实例，如果发现已经存在则直接使用该实例，并把在这个Activity之上的所有其他Activity统统出栈，如果没有发现就会创建一个新的Activity实例。</p><h3 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h3><p><img src="https://pic.imgdb.cn/item/61ee98bc2ab3f51d9173567a.png"><br>当Activity的启动模式指定为singleInstance，会启用一个新的返回栈来管理这个Activity。</p><p>假设我们的程序中有一个Activity是允许其他程序调用的，如果想实现其他程序和我们的程序可以共享这个Activity的实例，就可以使用singleInstance模式。</p><p>在这种模式下，会有一个单独的返回栈来管理这个Activity，不管是哪个应用程序来访问这个Activity，都共用的同一个返回栈，也就解决了共享Activity实例的问题。</p><h1 id="软件也要拼脸蛋，UI开发的点点滴滴"><a href="#软件也要拼脸蛋，UI开发的点点滴滴" class="headerlink" title="软件也要拼脸蛋，UI开发的点点滴滴"></a>软件也要拼脸蛋，UI开发的点点滴滴</h1><p>本章主要讲解Android各UI组件的基本使用，由于过于基础，暂不记录笔记。</p><h1 id="手机平板要兼顾，探究Fragment"><a href="#手机平板要兼顾，探究Fragment" class="headerlink" title="手机平板要兼顾，探究Fragment"></a>手机平板要兼顾，探究Fragment</h1><h2 id="动态添加Fragment"><a href="#动态添加Fragment" class="headerlink" title="动态添加Fragment"></a>动态添加Fragment</h2><ul><li>创建待添加Fragment的实例。</li><li>获取FragmentManager，在Activity中可以直接调用getSupportFragmentManager()方法获取。</li><li>开启一个事务，通过调用beginTransaction()方法开启。</li><li>向容器内添加或替换Fragment，一般使用replace()方法实现，需要传入容器的id和待添加的Fragment实例。</li><li>提交事务，调用commit()方法来完成。<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;        <span class="keyword">super</span>.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        button.setOnClickListener &#123;            replaceFragment(AnotherRightFragment())        &#125;    &#125;    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">replaceFragment</span><span class="params">(fragment: <span class="type">Fragment</span>)</span></span> &#123;        <span class="keyword">val</span> fragmentManager = supportFragmentManager        <span class="keyword">val</span> transaction = fragmentManager.beginTransaction()        transaction.replace(R.id.rightLayout, fragment)        transaction.commit()    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="在Fragment中实现返回栈"><a href="#在Fragment中实现返回栈" class="headerlink" title="在Fragment中实现返回栈"></a>在Fragment中实现返回栈</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">transaction.addToBackStack(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h2 id="Fragment的生命周期"><a href="#Fragment的生命周期" class="headerlink" title="Fragment的生命周期"></a>Fragment的生命周期</h2><img src="https://pic.imgdb.cn/item/61ee9bf62ab3f51d91766186.png"></li></ul><h1 id="全局大喇叭，详解广播机制"><a href="#全局大喇叭，详解广播机制" class="headerlink" title="全局大喇叭，详解广播机制"></a>全局大喇叭，详解广播机制</h1><h2 id="标准广播"><a href="#标准广播" class="headerlink" title="标准广播"></a>标准广播</h2><p>标准广播（normal broadcasts）是一种完全异步执行的广播，在广播发出之后，所有的BroadcastReceiver几乎都会在同一时刻接收到收到这条广播消息，因此它们之间没有任何先后顺序可言。这种广播的效率会比较高，但同时也意味着它是无法被截断的。示意图如下：<br><img src="https://pic.imgdb.cn/item/61eea1ab2ab3f51d917bef95.png"></p><h2 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h2><p>有序广播（ordered broadcasts）是一种同步执行的广播，在广播发出之后，同一时刻只会有一个BroadcastReceiver能够收到这条广播消息，当这个BroadcastReceiver中的逻辑执行完毕后，广播才会继续传递。所以此时的BroadcastReceiver是有先后顺序的，优先级高的BroadcastReceiver就可以先收到广播消息，并且前面的BroadcastReceiver还可以截断正在传递的广播，这样后面的BroadcastReceiver就无法收到广播消息了。示意图如下：<br><img src="https://pic.imgdb.cn/item/61eea1c12ab3f51d917c0753.jpg"></p><h1 id="数据库存储全方案，详解持久化技术"><a href="#数据库存储全方案，详解持久化技术" class="headerlink" title="数据库存储全方案，详解持久化技术"></a>数据库存储全方案，详解持久化技术</h1><h1 id="跨程序共享数据，探究ContentProvider"><a href="#跨程序共享数据，探究ContentProvider" class="headerlink" title="跨程序共享数据，探究ContentProvider"></a>跨程序共享数据，探究ContentProvider</h1><h1 id="丰富你的程序，运用手机多媒体"><a href="#丰富你的程序，运用手机多媒体" class="headerlink" title="丰富你的程序，运用手机多媒体"></a>丰富你的程序，运用手机多媒体</h1><h1 id="后台默默的劳动者，探究Service"><a href="#后台默默的劳动者，探究Service" class="headerlink" title="后台默默的劳动者，探究Service"></a>后台默默的劳动者，探究Service</h1><h1 id="看看精彩的世界，使用网络技术"><a href="#看看精彩的世界，使用网络技术" class="headerlink" title="看看精彩的世界，使用网络技术"></a>看看精彩的世界，使用网络技术</h1><h1 id="最佳的UI体验，MaterialDesign实战"><a href="#最佳的UI体验，MaterialDesign实战" class="headerlink" title="最佳的UI体验，MaterialDesign实战"></a>最佳的UI体验，MaterialDesign实战</h1><h1 id="高级程序开发组件，探究Jetpack"><a href="#高级程序开发组件，探究Jetpack" class="headerlink" title="高级程序开发组件，探究Jetpack"></a>高级程序开发组件，探究Jetpack</h1><h1 id="继续进阶，你还应该掌握的高级技巧"><a href="#继续进阶，你还应该掌握的高级技巧" class="headerlink" title="继续进阶，你还应该掌握的高级技巧"></a>继续进阶，你还应该掌握的高级技巧</h1><h1 id="进入实战，开发一个天气预报App"><a href="#进入实战，开发一个天气预报App" class="headerlink" title="进入实战，开发一个天气预报App"></a>进入实战，开发一个天气预报App</h1><h1 id="编写并发布一个开源库，PermissionX"><a href="#编写并发布一个开源库，PermissionX" class="headerlink" title="编写并发布一个开源库，PermissionX"></a>编写并发布一个开源库，PermissionX</h1><p>（持续更新中。。。）</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 《第一行代码(第3版)》 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
