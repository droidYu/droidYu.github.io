<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【学习笔记】之《第一行代码(第3版)》(Kotlin部分)</title>
      <link href="/notes/first_code_3_kotlin/"/>
      <url>/notes/first_code_3_kotlin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于《第一行代码(第3版)》包含了Android基础和Kotlin两部分知识，故笔者将笔记分为两篇：<br><a href="https://droidyu.github.io/notes/first_code_3_android/">【学习笔记】之《第一行代码(第3版)》(Android部分)</a><br><a href="https://droidyu.github.io/notes/first_code_3_kotlin/">【学习笔记】之《第一行代码(第3版)》(Kotlin部分)</a></p></blockquote><h1 id="Kotlin基础"><a href="#Kotlin基础" class="headerlink" title="Kotlin基础"></a>Kotlin基础</h1><h2 id="Kotlin的发展历程"><a href="#Kotlin的发展历程" class="headerlink" title="Kotlin的发展历程"></a>Kotlin的发展历程</h2><ul><li><p>2011年，JetBrains发布了Kotlin的第一个版本，并在2012年将其开源。</p></li><li><p>2016年Kotlin发布了1.0正式版，代表着Kotlin语言已经足够成熟和稳定了，并且JetBrains也在自家的旗舰IDE开发工具IntelliJ IDEA中加入了Kotlin的支持。</p></li><li><p>2017年Google宣布Kotlin正式成为Android开发一级语言，并且Android Studio也加入了对Kotlin的支持。</p></li><li><p>2019年Google正式宣布了Kotlin First，未来提供的官方API也将会以Kotlin版本为主。</p></li></ul><h2 id="Kotlin相比于Java的优势"><a href="#Kotlin相比于Java的优势" class="headerlink" title="Kotlin相比于Java的优势"></a>Kotlin相比于Java的优势</h2><ul><li><p>语法更加简洁，对于同样的功能，使用Kotlin开发的代码量可能会比使用Java开发的减少50%甚至更多。</p></li><li><p>语法更加高级，相比于Java比较老旧的语法，Kotlin增加了很多现代高级语言的语法特性，使得开发效率大大提升。</p></li><li><p>语言更加安全，Kotlin几乎杜绝了空指针这个全球崩溃率最高的异常。</p></li><li><p>和Java是100%兼容的，Kotlin可以直接调用使用Java编写的代码，也可以无缝使用Java第三方的开源库。这使得Kotlin在加入了诸多新特性的同时，还继承了Java的全部财富。</p></li></ul><h2 id="变量和函数"><a href="#变量和函数" class="headerlink" title="变量和函数"></a>变量和函数</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><code>val</code>（value的简写的简写）用来声明一个不可变的变量，这种变量在初始赋值之后就再也不能重新赋值，对应Java中的<code>final</code>变量。</li><li><code>var</code>（variable的简写的简写）用来声明一个可变的变量，这种变量在初始赋值之后仍然可以再被重新赋值复制，对应Java中的非<code>final</code>变量。</li></ul><table><thead><tr><th>Java基本数据类型</th><th>Kotlin对象数据类型</th><th>数据类型说明</th></tr></thead><tbody><tr><td>int</td><td>Int</td><td>整型</td></tr><tr><td>long</td><td>Long</td><td>长整型</td></tr><tr><td>short</td><td>Short</td><td>短整型</td></tr><tr><td>float</td><td>Float</td><td>单精度浮点型</td></tr><tr><td>double</td><td>Double</td><td>双精度浮点型</td></tr><tr><td>boolean</td><td>Boolean</td><td>布尔型</td></tr><tr><td>char</td><td>Char</td><td>字符型</td></tr><tr><td>byte</td><td>Byte</td><td>字节型</td></tr></tbody></table><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>定义一个函数的语法规则如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">methodName</span><span class="params">(param1: <span class="type">Int</span>, param2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;      <span class="keyword">return</span> <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p>当一个函数的函数体中只有一行代码时，可以使用单行代码函数的语法糖：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">methodName</span><span class="params">(param1: <span class="type">Int</span>, param2: <span class="type">Int</span>)</span></span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="逻辑控制"><a href="#逻辑控制" class="headerlink" title="逻辑控制"></a>逻辑控制</h2><h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><p>Kotlin中的if语句相比于Java有一个额外的功能：它是可以有返回值的，返回值就是<code>if</code>语句每一个条件中最后一行代码的返回值。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;    <span class="keyword">val</span> value = <span class="keyword">if</span> (num1 &gt; num2) &#123;        num1    &#125; <span class="keyword">else</span> &#123;        num2    &#125;    <span class="keyword">return</span> value&#125;</span><br></pre></td></tr></table></figure><p>仔细观察上述代码，你会发现<code>value</code>其实是一个多余的变量，我们可以直接将<code>if</code>语句返回，这样代码将会变得更加精简，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;    <span class="keyword">return</span> <span class="keyword">if</span> (num1 &gt; num2) &#123;        num1    &#125; <span class="keyword">else</span> &#123;        num2    &#125;&#125;</span><br></pre></td></tr></table></figure><p>当一个函数只有一行代码时，可以省略函数体部分，直接将这一行代码使用等号串连在函数定义的尾部。虽然<code>largerNumber()</code>函数不止只有一行代码，但是它和只有一行代码的作用是相同的，只是<code>return</code>了一下<code>if</code>语句的返回值而已，符合该语法糖的使用条件。那么我们就可以将代码进一步精简：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span> (num1 &gt; num2) &#123;    num1&#125; <span class="keyword">else</span> &#123;    num2&#125;</span><br></pre></td></tr></table></figure><p>最后，还可以将上述代码再精简一下，直接压缩成一行代码：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span> (num1 &gt; num2) num1 <span class="keyword">else</span> num2</span><br></pre></td></tr></table></figure><h3 id="when条件语句"><a href="#when条件语句" class="headerlink" title="when条件语句"></a>when条件语句</h3><p>当需要判断的条件非常多的时候，可以考虑使用<code>when</code>语句来替代<code>if</code>语句。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">(name: <span class="type">String</span>)</span></span> = <span class="keyword">when</span> (name) &#123;    <span class="string">&quot;Tom&quot;</span> -&gt; <span class="number">86</span>    <span class="string">&quot;Jim&quot;</span> -&gt; <span class="number">77</span>    <span class="string">&quot;Jack&quot;</span> -&gt; <span class="number">95</span>    <span class="string">&quot;Lily&quot;</span> -&gt; <span class="number">100</span>    <span class="keyword">else</span> -&gt; <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p>除了精确匹配之外，<code>when</code>语句还允许进行类型匹配。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">checkNumber</span><span class="params">(num: <span class="type">Number</span>)</span></span> &#123;    <span class="keyword">when</span> (num) &#123;        <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; println(<span class="string">&quot;number is Int&quot;</span>)        <span class="keyword">is</span> <span class="built_in">Double</span> -&gt; println(<span class="string">&quot;number is Double&quot;</span>)        <span class="keyword">else</span> -&gt; println(<span class="string">&quot;number not support&quot;</span>)    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="for-in循环语句"><a href="#for-in循环语句" class="headerlink" title="for-in循环语句"></a>for-in循环语句</h3><p>我们可以使用如下Kotlin代码来表示一个区间：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">0.</span><span class="number">.10</span></span><br></pre></td></tr></table></figure><p>上述代码表示创建了一个0到10的区间，并且两端都是闭区间，这意味着0到10这两个端点都是包含在区间中的，用数学的方式表达出来就是<code>[0, 10]</code>。</p><p>也可以使用<code>until</code>关键字来创建一个左闭右开的区间：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">0</span> until <span class="number">10</span></span><br></pre></td></tr></table></figure><p>上述代码表示创建了一个0到10的左闭右开区间，它的数学表达方式是<code>[0, 10)</code>。有了区间之后，我们就可以通过<code>for-in</code>循环来遍历这个区间：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.10</span>) &#123;        println(i)    &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果你想跳过其中的一些元素，可以使用<code>step</code>关键字：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">10</span> step <span class="number">2</span>) &#123;        println(i)    &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果你想创建一个降序的区间，可以使用<code>downTo</code>关键字：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">10</span> downTo <span class="number">1</span>) &#123;        println(i)    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>可以使用如下代码定义一个类，以及声明它所拥有的字段和函数：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;    <span class="keyword">var</span> name = <span class="string">&quot;&quot;</span>    <span class="keyword">var</span> age = <span class="number">0</span>    <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span> &#123;        println(name + <span class="string">&quot; is eating. He is &quot;</span> + age + <span class="string">&quot; years old.&quot;</span>)    &#125;&#125;</span><br></pre></td></tr></table></figure><p>然后使用如下代码创建对象，并对对象进行操作：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;    <span class="keyword">val</span> p = Person()    p.name = <span class="string">&quot;Jack&quot;</span>    p.age = <span class="number">19</span>    p.eat()&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>Kotlin中一个类默认是不可以被继承的，如果想要让一个类可以被继承，需要主动声明<code>open</code>关键字：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要让另一个类去继承<code>Person</code>类，则需要使用冒号关键字：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> : <span class="type">Person</span></span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> sno = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> grade = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在<code>Student</code>类中就自动拥有了<code>Person</code>类中的字段和函数，还可以定义自己独有的字段和函数。</p><p>Kotlin中定义接口的关键字和Java中是相同的，都是使用的<code>interface</code>：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Study</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">readBooks</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">doHomework</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而Kotlin中实现接口的关键字变量了冒号，和继承使用的是同样的关键字：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>) : Study &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">readBooks</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(name + <span class="string">&quot; is reading.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doHomework</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(name + <span class="string">&quot; is doing homework.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h3><p>Kotlin中使用<code>data</code>关键字可以定义一个数据类：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Cellphone</span></span>(<span class="keyword">val</span> brand: String, <span class="keyword">val</span> price: <span class="built_in">Double</span>)</span><br></pre></td></tr></table></figure><p>Kotlin会根据数据类的主构造函数中的参数将<code>equals()</code>、<code>hashCode()</code>、<code>toString()</code>等固定且无实际逻辑意义的方法自动生成，从而大大简少了开发的工作量。</p><h3 id="单例类"><a href="#单例类" class="headerlink" title="单例类"></a>单例类</h3><p>Kotlin中使用<code>object</code>关键字可以定义一个单例类：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> Singleton &#123;    <span class="function"><span class="keyword">fun</span> <span class="title">singletonTest</span><span class="params">()</span></span> &#123;        println(<span class="string">&quot;singletonTest is called.&quot;</span>)    &#125;&#125;</span><br></pre></td></tr></table></figure><p>而调用单例类中的函数比较类似于Java中静态方法的调用方式：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Singleton.singletonTest()</span><br></pre></td></tr></table></figure><p>这种写法虽然看上去像是静态方法的调用，但其实Kotlin在背后自动帮我们创建了一个<code>Singleton</code>类的实例，并且保证全局只会存在一个<code>Singleton</code>实例。</p><h2 id="Lambda编程"><a href="#Lambda编程" class="headerlink" title="Lambda编程"></a>Lambda编程</h2><h3 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h3><p>使用如下代码可以初始化一个<code>List</code>集合：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用如下代码可以初始化一个<code>Set</code>集合：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="keyword">set</span> = setOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用如下代码可以初始化一个<code>Map</code>集合：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> map = mapOf(<span class="string">&quot;Apple&quot;</span> to <span class="number">1</span>, <span class="string">&quot;Banana&quot;</span> to <span class="number">2</span>, <span class="string">&quot;Orange&quot;</span> to <span class="number">3</span>, <span class="string">&quot;Pear&quot;</span> to <span class="number">4</span>, <span class="string">&quot;Grape&quot;</span> to <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda就是一小段可以作为参数传递的代码。正常情况下，我们向某个函数传参时只能传入变量，而借助Lambda却允许传入一小段代码。</p><p>我们来看一下Lambda表达式的语法结构：</p><p>{参数名1: 参数类型, 参数名2: 参数类型 -&gt; 函数体}</p><p>首先最外层是一对大括号，如果有参数传入到Lambda表达式中的话，我们还需要声明参数列表，参数列表的结尾使用一个-&gt;符号，表示参数列表的结束以及函数体的开始，函数体中可以编写任意行代码，并且最后一行代码会自动作为Lambda表达式的返回值。</p><h3 id="集合的函数式API"><a href="#集合的函数式API" class="headerlink" title="集合的函数式API"></a>集合的函数式API</h3><p>集合中的<code>map</code>函数是最常用的一种函数式API，它用于将集合中的每个元素都映射成一个另外的值，映射的规则在Lambda表达式中指定，最终生成一个新的集合。比如，这里我们希望让所有的水果名都变成大写模式，就可以这样写：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>)    <span class="keyword">val</span> newList = list.map(&#123; fruit: String -&gt; fruit.toUpperCase() &#125;)    <span class="keyword">for</span> (fruit <span class="keyword">in</span> newList) &#123;        println(fruit)    &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>当Lambda参数是函数的最后一个参数时，可以将Lambda表达式移到函数括号的外面。</p></li><li><p>如果Lambda参数是函数的唯一一个参数的话，还可以将函数的括号省略。</p></li><li><p>由于Kotlin拥有出色的类型推导机制，Lambda表达式中的参数列表其实在大多数情况下也不必声明参数类型。</p></li><li><p>当Lambda表达式的参数列表中只有一个参数时，也不必声明参数名，而是可以使用<code>it</code>关键字来代替。</p></li></ul><p>因此，Lambda表达式的写法可以进一步简化成如下方式：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">newList = list.map &#123; it.toUpperCase() &#125;</span><br></pre></td></tr></table></figure><h3 id="Java函数式API"><a href="#Java函数式API" class="headerlink" title="Java函数式API"></a>Java函数式API</h3><p>如果我们在Kotlin代码中调用了一个Java方法，并且该方法接收一个Java单抽象方法接口参数，就可以使用函数式API。Java单抽象方法接口指的是接口中只有一个待实现方法，如果接口中有多个待实现方法，则无法使用函数式API。</p><p>举个例子，Android中有一个极为常用的点击事件接口<code>OnClickListener</code>，其定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span> </span>&#123;     <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>;&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这是一个单抽象方法接口。假设现在我们拥有一个按钮<code>button</code>的实例，就可以使用函数式API的写法来注册这个按钮的点击事件：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">button.setOnClickListener &#123; v -&gt;&#125;</span><br></pre></td></tr></table></figure><h2 id="空指针检查"><a href="#空指针检查" class="headerlink" title="空指针检查"></a>空指针检查</h2><h3 id="空指针检查-1"><a href="#空指针检查-1" class="headerlink" title="空指针检查"></a>空指针检查</h3><p>空指针是一种不受编程语言检查的运行时异常，只能由程序员主动通过逻辑判断来避免，但即使是最出色的程序员，也不可能将所有潜在的空指针异常全部考虑到。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStudy</span><span class="params">(Study study)</span> </span>&#123;    study.readBooks();    study.doHomework();&#125;</span><br></pre></td></tr></table></figure><p>这段Java代码安全吗？不一定，因为这要取决于调用方传入的参数是什么，如果我们向<code>doStudy()</code>方法传入了一个<code>null</code>参数，那么毫无疑问这里就会发生空指针异常。因此，更加稳妥的做法是在调用参数的方法之前先进行一个判空处理，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStudy</span><span class="params">(Study study)</span> </span>&#123;    <span class="keyword">if</span> (study != <span class="keyword">null</span>) &#123;        study.readBooks();        study.doHomework();    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="可空类型系统"><a href="#可空类型系统" class="headerlink" title="可空类型系统"></a>可空类型系统</h3><p>Kotlin中引入了一个可空类型系统的概念，它利用编译时判空检查的机制几乎杜绝了空指针异常。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>)</span></span> &#123;    study.readBooks()    study.doHomework()&#125;</span><br></pre></td></tr></table></figure><p>这段代码看上去和刚才的Java版本并没有什么区别，但实际上它是没有空指针风险的，因为Kotlin默认所有的参数和变量都不可为空，所以这里传入的<code>Study</code>参数也一定不会为空，可以放心地调用它的任何函数。</p><p>Kotlin提供了另外一套可为空的类型系统，就是在类名的后面加上一个问号。比如，<code>Int</code>表示不可为空的整型，而<code>Int?</code>就表示可为空的整型；<code>String</code>表示不可为空的字符串，而<code>String?</code>就表示可为空的字符串。</p><p>使用可为空的类型系统时，需要在编译时期就把所有的空指针异常都处理掉才行。</p><h3 id="判空辅助工具"><a href="#判空辅助工具" class="headerlink" title="判空辅助工具"></a>判空辅助工具</h3><p>Kotlin提供了一系列的辅助工具，使开发者能够更轻松地进行判空处理。</p><p><code>?.</code>操作符表示当对象不为空时正常调用相应的方法，当对象为空时则什么都不做。比如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a != <span class="literal">null</span>) &#123;    a.doSomething()&#125;</span><br></pre></td></tr></table></figure><p>这段代码使用<code>?.</code>操作符就可以简化成：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">a?.doSomething()</span><br></pre></td></tr></table></figure><p><code>?:</code>操作符表示如果左边表达式的结果不为空就返回左边表达式的结果，否则就返回右边表达式的结果。比如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> c = <span class="keyword">if</span> (a ! = <span class="literal">null</span>) &#123;    a&#125; <span class="keyword">else</span> &#123;    b&#125;</span><br></pre></td></tr></table></figure><p>这段代码的逻辑使用<code>?:</code>操作符就可以简化成：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> c = a ?: b</span><br></pre></td></tr></table></figure><p>结合使用<code>?.</code>操作符和<code>let</code>函数也可以对多次重复调用的某个变量统一进行判空处理：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>?)</span></span> &#123;    study?.let &#123;        it.readBooks()        it.doHomework()    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h2><h3 id="字符串内嵌表达式"><a href="#字符串内嵌表达式" class="headerlink" title="字符串内嵌表达式"></a>字符串内嵌表达式</h3><p>在Kotlin中，我们可以直接将表达式写在字符串里面，即使是构建非常复杂的字符串，也会变得轻而易举。</p><p>Kotlin中字符串内嵌表达式的语法规则如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;hello, <span class="subst">$&#123;obj.name&#125;</span>. nice to meet you!&quot;</span></span><br></pre></td></tr></table></figure><p>当表达式中仅有一个变量的时候，还可以将两边的大括号省略：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;hello, <span class="variable">$name</span>. nice to meet you!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="函数的参数默认值"><a href="#函数的参数默认值" class="headerlink" title="函数的参数默认值"></a>函数的参数默认值</h3><p>Kotlin允许在定义函数的时候给任意参数设定一个默认值，这样当调用此函数时就不会强制要求调用方为此参数传值，在没有传值的情况下会自动使用参数的默认值。语法格式如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printParams</span><span class="params">(num: <span class="type">Int</span>, str: <span class="type">String</span> = <span class="string">&quot;hello&quot;</span>)</span></span> &#123;    println(<span class="string">&quot;num is <span class="variable">$num</span> , str is <span class="variable">$str</span>&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>这里给<code>printParams()</code>函数的第二个参数设定了一个默认值，这样当调用<code>printParams()</code>函数时，可以选择给第二个参数传值，也可以选择不传，在不传的情况下就会自动使用默认值。</p><h1 id="标准函数和静态方法"><a href="#标准函数和静态方法" class="headerlink" title="标准函数和静态方法"></a>标准函数和静态方法</h1><h2 id="标准函数"><a href="#标准函数" class="headerlink" title="标准函数"></a>标准函数</h2><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p><code>with</code>函数接收两个参数：第一个参数可以是一个任意类型的对象，第二个参数是一个Lambda表达式。<code>with</code>函数会在Lambda表达式中提供第一个参数对象的上下文，并使用Lambda表达式中的最后一行代码作为返回值返回。</p><p>示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> result = with(obj) &#123;      <span class="comment">// 这里是obj的上下文</span>      <span class="string">&quot;value&quot;</span> <span class="comment">// with函数的返回值</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p><code>run</code>函数的用法和使用场景其实和<code>with</code>函数是非常类似的，只是稍微做了一些语法改动而已。首先<code>run</code>函数是不能直接调用的，而是一定要调用某个对象的<code>run</code>函数才行；其次<code>run</code>函数只接收一个Lambda参数，并且会在Lambda表达式中提供调用对象的上下文。其他方面和<code>with</code>函数是一样的，包括也会使用Lambda表达式中的最后一行代码作为返回值返回。</p><p>示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> result = obj.run &#123;      <span class="comment">// 这里是obj的上下文</span>      <span class="string">&quot;value&quot;</span> <span class="comment">// run函数的返回值</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p><code>apply</code>函数和<code>run</code>函数也是极其类似的，都是要在某个对象上调用，并且只接收一个Lambda参数，也会在Lambda表达式中提供调用对象的上下文，但是<code>apply</code>函数无法指定返回值，而是会自动返回调用对象本身。</p><p>示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> result = obj.apply &#123;      <span class="comment">// 这里是obj的上下文</span>&#125;<span class="comment">// result == obj</span></span><br></pre></td></tr></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>Kotlin没有直接定义静态方法的关键字，但是提供了一些语法特性来支持类似于静态方法调用的写法，如单例类，<code>companion object</code>等，这些语法特性基本可以满足我们平时的开发需求了。</p><p>然而如果你确确实实需要定义真正的静态方法， Kotlin仍然提供了两种实现方式：注解和顶层方法。</p><h3 id="伴生对象-JvmStatic注解"><a href="#伴生对象-JvmStatic注解" class="headerlink" title="伴生对象+JvmStatic注解"></a>伴生对象+JvmStatic注解</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;        <span class="meta">@JvmStatic</span>        <span class="function"><span class="keyword">fun</span> <span class="title">doAction</span><span class="params">()</span></span> &#123;            println(<span class="string">&quot;do action2&quot;</span>)        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="顶层方法"><a href="#顶层方法" class="headerlink" title="顶层方法"></a>顶层方法</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;    println(<span class="string">&quot;do something&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><h1 id="延迟初始化和密封类"><a href="#延迟初始化和密封类" class="headerlink" title="延迟初始化和密封类"></a>延迟初始化和密封类</h1><h2 id="变量延迟初始化"><a href="#变量延迟初始化" class="headerlink" title="变量延迟初始化"></a>变量延迟初始化</h2><p>延迟初始化使用的是<code>lateinit</code>关键字，它可以告诉Kotlin编译器，我会在晚些时候对这个变量进行初始化，这样就不用在一开始的时候将它赋值为<code>null</code>了。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>(), View.OnClickListener &#123;    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> adapter: MsgAdapter    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;        …        adapter = MsgAdapter(msgList)        …    &#125;    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(v: <span class="type">View</span>?)</span></span> &#123;        …        adapter.notifyItemInserted(msgList.size - <span class="number">1</span>)        …    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h2><p>当在when语句中传入一个密封类变量作为条件时，Kotlin编译器会自动检查该密封类有哪些子类，并强制要求你将每一个子类所对应的条件全部处理。<br>这样就可以保证，即使没有编写<code>else</code>条件，也不可能会出现漏写条件分支的情况。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span></span><span class="class"><span class="keyword">class</span> <span class="title">Success</span></span>(<span class="keyword">val</span> msg: String) : Result()<span class="class"><span class="keyword">class</span> <span class="title">Failure</span></span>(<span class="keyword">val</span> error: Exception) : Result()</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getResultMsg</span><span class="params">(result: <span class="type">Result</span>)</span></span> = <span class="keyword">when</span> (result) &#123;    <span class="keyword">is</span> Success -&gt; result.msg    <span class="keyword">is</span> Failure -&gt; <span class="string">&quot;Error is <span class="subst">$&#123;result.error.message&#125;</span>&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="扩展函数和运算符重载"><a href="#扩展函数和运算符重载" class="headerlink" title="扩展函数和运算符重载"></a>扩展函数和运算符重载</h1><h2 id="扩展函数"><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h2><p>扩展函数表示即使在不修改某个类的源码的情况下，仍然可以打开这个类，向该类添加新的函数。</p><p>其语法结构非常简单，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> ClassName.<span class="title">methodName</span><span class="params">(param1: <span class="type">Int</span>, param2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;      <span class="keyword">return</span> <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p>Kotlin的运算符重载允许我们让任意两个对象进行相加，或者是进行更多其他的运算操作。</p><p>这里以加号运算符为例，如果想要实现让两个对象相加的功能，那么它的语法结构如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span> </span>&#123;      <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(obj: <span class="type">Obj</span>)</span></span>: Obj &#123;            <span class="comment">// 处理相加的逻辑</span>      &#125;&#125;</span><br></pre></td></tr></table></figure><p>语法糖表达式和实际调用函数对照表如下所示</p><table><thead><tr><th>语法糖表达式</th><th>实际调用函数</th></tr></thead><tbody><tr><td>a + b</td><td>a.plus(b)</td></tr><tr><td>a - b</td><td>a.minus(b)</td></tr><tr><td>a * b</td><td>a.times(b)</td></tr><tr><td>a / b</td><td>a.div(b)</td></tr><tr><td>a % b</td><td>a.rem(b)</td></tr><tr><td>a++</td><td>a.inc()</td></tr><tr><td>a–</td><td>a.dec()</td></tr><tr><td>+a</td><td>a.unaryPlus()</td></tr><tr><td>-a</td><td>a.unaryMinus()</td></tr><tr><td>!a</td><td>a.not()</td></tr><tr><td>a == b</td><td>a.equals(b)</td></tr><tr><td>a &gt; b , a &lt; b ,  a &gt;= b , a &lt;= b</td><td>a.compareTo(b)</td></tr><tr><td>a .. b</td><td>a.rangeTo(b)</td></tr><tr><td>a[b]</td><td>a.get(b)</td></tr><tr><td>a[]b = c</td><td>a.set(b, c)</td></tr><tr><td>a in b</td><td>b.contains(a)</td></tr></tbody></table><h1 id="高阶函数详解"><a href="#高阶函数详解" class="headerlink" title="高阶函数详解"></a>高阶函数详解</h1><h2 id="定义高阶函数"><a href="#定义高阶函数" class="headerlink" title="定义高阶函数"></a>定义高阶函数</h2><p>如果一个函数接收另一个函数作为参数，或者返回值的类型是另一个函数，那么该函数就称为高阶函数。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">example</span><span class="params">(func: (<span class="type">String</span>, <span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;      func(<span class="string">&quot;hello&quot;</span>, <span class="number">123</span>)&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里的<code>example()</code>函数接收了一个函数类型的参数，因此<code>example()</code>函数就是一个高阶函数。而调用一个函数类型的参数，它的语法类似于调用一个普通的函数，只需要在参数名的后面加上一对括号，并在括号中传入必要的参数即可。</p><h2 id="内联函数的作用"><a href="#内联函数的作用" class="headerlink" title="内联函数的作用"></a>内联函数的作用</h2><p>内联函数可以将使用Lambda表达式带来的运行时开销完全消除。它的工作原理并不复杂，就是Kotlin编译器会将内联函数中的代码在编译的时候自动替换到调用它的地方，这样也就不存在运行时的开销了。</p><p>定义内联函数很简单，只需要在定义高阶函数时加上<code>inline</code>关键字的声明即可，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">num1AndNum2</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>, operation: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;    <span class="keyword">val</span> result = operation(num1, num2)    <span class="keyword">return</span> result&#125;</span><br></pre></td></tr></table></figure><h1 id="高阶函数的应用"><a href="#高阶函数的应用" class="headerlink" title="高阶函数的应用"></a>高阶函数的应用</h1><h2 id="简化SharedPreferences的用法"><a href="#简化SharedPreferences的用法" class="headerlink" title="简化SharedPreferences的用法"></a>简化SharedPreferences的用法</h2><p>我们可以使用高阶函数简化<code>SharedPreferences</code>的用法，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> SharedPreferences.<span class="title">open</span><span class="params">(block: <span class="type">SharedPreferences</span>.<span class="type">Editor</span>.() -&gt; <span class="type">Unit</span>)</span></span> &#123;    <span class="keyword">val</span> editor = edit()    editor.block()    editor.apply()&#125;</span><br></pre></td></tr></table></figure><p>定义好了<code>open</code>函数之后，以后在项目中使用<code>SharedPreferences</code>存储数据就会更加方便了，写法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">getSharedPreferences(<span class="string">&quot;data&quot;</span>, Context.MODE_PRIVATE).<span class="keyword">open</span> &#123;    putString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>)    putInt(<span class="string">&quot;age&quot;</span>, <span class="number">28</span>)    putBoolean(<span class="string">&quot;married&quot;</span>, <span class="literal">false</span>)&#125;</span><br></pre></td></tr></table></figure><h2 id="简化ContentValues的用法"><a href="#简化ContentValues的用法" class="headerlink" title="简化ContentValues的用法"></a>简化ContentValues的用法</h2><p>我们还可以借助<code>vararg</code>和<code>Pair</code>对象来简化<code>ContentValues</code>的用法，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">cvOf</span><span class="params">(<span class="keyword">vararg</span> pairs: <span class="type">Pair</span>&lt;<span class="type">String</span>, Any?&gt;)</span></span>: ContentValues &#123;    <span class="keyword">val</span> cv = ContentValues()    <span class="keyword">for</span> (pair <span class="keyword">in</span> pairs) &#123;        <span class="keyword">val</span> key = pair.first        <span class="keyword">val</span> value = pair.second        <span class="keyword">when</span> (value) &#123;            <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; cv.put(key, value)            <span class="keyword">is</span> <span class="built_in">Long</span> -&gt; cv.put(key, value)            <span class="keyword">is</span> <span class="built_in">Short</span> -&gt; cv.put(key, value)            <span class="keyword">is</span> <span class="built_in">Float</span> -&gt; cv.put(key, value)            <span class="keyword">is</span> <span class="built_in">Double</span> -&gt; cv.put(key, value)            <span class="keyword">is</span> <span class="built_in">Boolean</span> -&gt; cv.put(key, value)            <span class="keyword">is</span> String -&gt; cv.put(key, value)            <span class="keyword">is</span> <span class="built_in">Byte</span> -&gt; cv.put(key, value)            <span class="keyword">is</span> ByteArray -&gt; cv.put(key, value)            <span class="literal">null</span> -&gt; cv.putNull(key)        &#125;    &#125;    <span class="keyword">return</span> cv&#125;</span><br></pre></td></tr></table></figure><p>然后就可以使用如下的写法来简单创建<code>ContentValues</code>对象了：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> values = cvOf(<span class="string">&quot;name&quot;</span> to <span class="string">&quot;Game of Thrones&quot;</span>, <span class="string">&quot;author&quot;</span> to <span class="string">&quot;George Martin&quot;</span>, <span class="string">&quot;pages&quot;</span> to <span class="number">720</span>, <span class="string">&quot;price&quot;</span> to <span class="number">20.85</span>)db.insert(<span class="string">&quot;Book&quot;</span>, <span class="literal">null</span>, values)</span><br></pre></td></tr></table></figure><h1 id="泛型和委托"><a href="#泛型和委托" class="headerlink" title="泛型和委托"></a>泛型和委托</h1><h2 id="泛型的基本用法"><a href="#泛型的基本用法" class="headerlink" title="泛型的基本用法"></a>泛型的基本用法</h2><p>泛型主要有两种定义方式，一种是定义泛型类，另一种是定义泛型方法，使用的语法结构都是<code>&lt;T&gt;</code>。当然括号内的<code>T</code>并不是固定要求的，事实上你使用任何英文字母或单词都可以，但是通常情况下，<code>T</code>是一种约定俗成的泛型写法。</p><p>如果要定义一个泛型类，就可以这么写：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="type">T</span>&gt; </span>&#123;    <span class="function"><span class="keyword">fun</span> <span class="title">method</span><span class="params">(param: <span class="type">T</span>)</span></span>: T &#123;        <span class="keyword">return</span> param    &#125;&#125;</span><br></pre></td></tr></table></figure><p>在调用<code>MyClass</code>类和<code>method()</code>方法的时候，可以将泛型指定成具体的类型，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> myClass = MyClass&lt;<span class="built_in">Int</span>&gt;()<span class="keyword">val</span> result = myClass.method(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><p>而如果不想定义一个泛型类，只是想定义一个泛型方法，只需要将定义泛型的语法结构写在方法上面就可以了，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">method</span><span class="params">(param: <span class="type">T</span>)</span></span>: T &#123;        <span class="keyword">return</span> param    &#125;&#125;</span><br></pre></td></tr></table></figure><p>此时的调用方式也需要进行相应的调整：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> myClass = MyClass()<span class="keyword">val</span> result = myClass.method&lt;<span class="built_in">Int</span>&gt;(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><p>可以看到，现在是在调用<code>method()</code>方法的时候指定泛型类型了。另外，Kotlin还拥有非常出色的类型推导机制，例如传入了一个<code>Int</code>类型的参数，它能够自动推导出泛型的类型就是<code>Int</code>型，因此这里也可以直接省略泛型的指定：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> myClass = MyClass()<span class="keyword">val</span> result = myClass.method(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h2 id="类委托"><a href="#类委托" class="headerlink" title="类委托"></a>类委托</h2><p>类委托的核心思想在于将一个类的具体实现委托给另一个类去完成。但是委托也有一定的弊端，如果接口中的待实现方法比较少还好，要是有几十甚至上百个方法的话，每个都去这样调用辅助对象中的相应方法实现，写起了就非常复杂了。这个问题在Kotlin中可以通过类委托的功能来解决。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySet</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">val</span> helperSet: HashSet&lt;T&gt;) : Set&lt;T&gt; <span class="keyword">by</span> helperSet &#123;    <span class="function"><span class="keyword">fun</span> <span class="title">helloWorld</span><span class="params">()</span></span> = println(<span class="string">&quot;Hello World&quot;</span>)    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span> = <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure><p>现在<code>MySet</code>就成为了一个全新的数据结构类，它不仅永远不会为空，而且还能打印<code>helloWorld()</code>，至于其他<code>Set</code>接口中的功能，则和<code>HashSet</code>保持一致。这就是Kotlin的类委托所能实现的功能。</p><h2 id="委托属性"><a href="#委托属性" class="headerlink" title="委托属性"></a>委托属性</h2><p>委托属性的核心思想是将一个属性（字段）的具体实现委托给另一个类去完成。</p><p>我们看一下委托属性的语法结构，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;    <span class="keyword">var</span> p <span class="keyword">by</span> Delegate()&#125;</span><br></pre></td></tr></table></figure><p>这里使用<code>by</code>关键字连接了左边的p属性和右边的<code>Delegate</code>实例，这种写法就代表着将<code>p</code>属性的具体实现委托给了的<code>Delegate</code>类去完成。当调用<code>p</code>属性的时候会自动调用<code>Delegate</code>类的<code>getValue()</code>方法，当给p属性赋值的时候会自动调用<code>Delegate</code>类的<code>setValue()</code>方法。</p><p>因此，我们还得对<code>Delegate</code>类进行具体的实现才行，代码如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Delegate</span> </span>&#123;        <span class="keyword">var</span> propValue: Any? = <span class="literal">null</span>    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(myClass: <span class="type">MyClass</span>, prop: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: Any? &#123;        <span class="keyword">return</span> propValue    &#125;    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(myClass: <span class="type">MyClass</span>, prop: <span class="type">KProperty</span>&lt;*&gt;, value: <span class="type">Any</span>?)</span></span> &#123;        propValue = value    &#125;&#125;</span><br></pre></td></tr></table></figure><p>整个委托属性的工作流程就是这样实现的，现在当我们给<code>MyClass</code>的<code>p</code>属性赋值时，就会调用<code>Delegate</code>类的<code>setValue()</code>方法，当获取<code>MyClass</code>中<code>p</code>属性的值时，就会调用<code>Delegate</code>类的<code>getValue()</code>方法。</p><h1 id="使用infix函数构建更可读的语法"><a href="#使用infix函数构建更可读的语法" class="headerlink" title="使用infix函数构建更可读的语法"></a>使用infix函数构建更可读的语法</h1><p>借助<code>infix</code>函数，我们可以使用一种更具可读性的语法来表达一段代码。<br>这里给<code>String</code>类添加了一个<code>beginsWith()</code>函数，它用于判断一个字符串是否是以某个指定参数开头。而加上了<code>infix</code>关键字之后，<code>beginsWith()</code>函数就变成了一个<code>infix</code>函数，这样除了传统的函数调用方式之外，我们还可以用一种特殊的语法糖格式调用<code>beginsWith()</code>函数，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;Hello Kotlin&quot;</span> beginsWith <span class="string">&quot;Hello&quot;</span>) &#123;    <span class="comment">// 处理具体的逻辑</span>&#125;</span><br></pre></td></tr></table></figure><p>我们还可以给<code>Collection</code>接口添加一个扩展函数：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Collection<span class="type">&lt;T&gt;</span>.<span class="title">has</span><span class="params">(element: <span class="type">T</span>)</span></span> = contains(element)</span><br></pre></td></tr></table></figure><p>现在我们就可以使用如下的语法来判断集合中是否包括某个指定的元素：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>)<span class="keyword">if</span> (list has <span class="string">&quot;Banana&quot;</span>) &#123;    <span class="comment">// 处理具体的逻辑</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="范型的高级特高级特"><a href="#范型的高级特高级特" class="headerlink" title="范型的高级特高级特"></a>范型的高级特高级特</h1><h2 id="泛型实化"><a href="#泛型实化" class="headerlink" title="泛型实化"></a>泛型实化</h2><p>Java中的泛型是通过类型擦除机制来实现的，而Kotlin却允许将内联函数中的泛型进行实化。</p><p>要将某个泛型实化需要两个前提条件。首先，该函数必须是内联函数才行，也就是要用<code>inline</code>关键字来修饰该函数。其次，在声明泛型的地方必须加上<code>reified</code>关键字来表示该泛型要进行实化。示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T&gt;</span> <span class="title">getGenericType</span><span class="params">()</span></span> = T::<span class="keyword">class</span>.java</span><br></pre></td></tr></table></figure><p>然后我们就可以通过以下代码获得泛型的具体类型了：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> result1 = getGenericType&lt;String&gt;()<span class="keyword">val</span> result2 = getGenericType&lt;<span class="built_in">Int</span>&gt;()</span><br></pre></td></tr></table></figure><h2 id="协变和逆变"><a href="#协变和逆变" class="headerlink" title="协变和逆变"></a>协变和逆变</h2><p>在开始学习协变和逆变之前，我们还得先了解一个约定。一个泛型类或者泛型接口中的方法，它的参数列表是接收数据的地方，因此可以称它为<code>in</code>位置，而它的返回值是输出数据的地方，因此可以称它为<code>out</code>位置，如下图所示。<br><img src="https://pic.imgdb.cn/item/61ef82d72ab3f51d9130b86f.png"><br>协变的定义：假如定义了一个<code>MyClass&lt;T&gt;</code>的泛型类，其中A是B的子类型，同时<code>MyClass&lt;A&gt;</code>又是<code>MyClass&lt;B&gt;</code>的子类型，那么我们就可以称<code>MyClass</code>在<code>T</code>这个泛型上是协变的。</p><p>逆变的定义：假如定义了一个<code>MyClass&lt;T&gt;</code>的泛型类，其中A是B的子类型，同时<code>MyClass&lt;B&gt;</code>又是<code>MyClass&lt;A&gt;</code>的子类型，那么我们就可以称<code>MyClass</code>在<code>T</code>这个泛型上是逆变的。<br><img src="https://pic.imgdb.cn/item/61ef83572ab3f51d91311d28.jpg"><br>观察如下代码，我们在泛型<code>T</code>的声明前面加上了一个<code>out</code>关键字。这就意味着现在<code>T</code>只能出现在<code>out</code>位置上，而不能出现在<code>in</code>位置上，同时也意味着<code>SimpleData</code>在泛型<code>T</code>上是协变的。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleData</span>&lt;<span class="type">out T</span>&gt;</span>(<span class="keyword">val</span> <span class="keyword">data</span>: T?) &#123;    <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">()</span></span>: T? &#123;        <span class="keyword">return</span> <span class="keyword">data</span>    &#125;&#125;</span><br></pre></td></tr></table></figure><p>观察如下代码，我们在泛型<code>T</code>的声明前面加上了一个<code>in</code>关键字。这就意味着现在<code>T</code>只能出现在<code>in</code>位置上，而不能出现在<code>out</code>位置上，同时也意味着<code>Transformer</code>在泛型<code>T</code>上是逆变的。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span>&lt;<span class="type">in T</span>&gt; </span>&#123;    <span class="function"><span class="keyword">fun</span> <span class="title">transform</span><span class="params">(t: <span class="type">T</span>)</span></span>: String&#125;</span><br></pre></td></tr></table></figure><h1 id="用协程编写高效的并发程序"><a href="#用协程编写高效的并发程序" class="headerlink" title="用协程编写高效的并发程序"></a>用协程编写高效的并发程序</h1><h1 id="编写好用的工具方法"><a href="#编写好用的工具方法" class="headerlink" title="编写好用的工具方法"></a>编写好用的工具方法</h1><h1 id="使用DSL构建专有的语法结构"><a href="#使用DSL构建专有的语法结构" class="headerlink" title="使用DSL构建专有的语法结构"></a>使用DSL构建专有的语法结构</h1><h1 id="Java与Kotlin代码之间的转换"><a href="#Java与Kotlin代码之间的转换" class="headerlink" title="Java与Kotlin代码之间的转换"></a>Java与Kotlin代码之间的转换</h1><p>（持续更新中。。。）</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 《第一行代码(第3版)》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习笔记】之《第一行代码(第3版)》(Android部分)</title>
      <link href="/notes/first_code_3_android/"/>
      <url>/notes/first_code_3_android/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于《第一行代码(第3版)》包含了Android基础和Kotlin两部分知识，故笔者将笔记分为两篇：<br><a href="https://droidyu.github.io/notes/first_code_3_android/">【学习笔记】之《第一行代码(第3版)》(Android部分)</a><br><a href="https://droidyu.github.io/notes/first_code_3_kotlin/">【学习笔记】之《第一行代码(第3版)》(Kotlin部分)</a></p></blockquote><h1 id="开始启程，你的第一行Android代码"><a href="#开始启程，你的第一行Android代码" class="headerlink" title="开始启程，你的第一行Android代码"></a>开始启程，你的第一行Android代码</h1><h2 id="Android系统架构"><a href="#Android系统架构" class="headerlink" title="Android系统架构"></a>Android系统架构</h2><p><img src="https://pic.imgdb.cn/item/61ed33632ab3f51d9139a269.png"></p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>所有安装在手机上的应用程序都是属于这一层，比如系统自带的联系人、短信等程序。</p><h3 id="应用框架层"><a href="#应用框架层" class="headerlink" title="应用框架层"></a>应用框架层</h3><p>这一层主要提供了构建应用程序时可能用到的各种API，Android自带的一些核心应用就是使用这些API完成的，开发者也可以通过使用这些API来构建自己的应用程序。</p><h3 id="系统运行库层"><a href="#系统运行库层" class="headerlink" title="系统运行库层"></a>系统运行库层</h3><p>这一层通过一些C/C++库来为Android系统提供了主要的特性支持。在这一层还包括Android运行时库和Dalvik虚拟机（5.0系统之后改为ART），它使得每个Android应用都能运行在独立的进程中，并拥有一个自己的虚拟机实例。<br>相较于JVM，Dalvik和ART是专门为移动设备定制的，它针对手机内存、CPU性能有限等情况做了优化处理。</p><h3 id="Linux内核层"><a href="#Linux内核层" class="headerlink" title="Linux内核层"></a>Linux内核层</h3><p>Android系统是基于Linux内核的，这一层为Android设备的各种硬件提供了底层的驱动，如显示驱动、音频驱动、照相机驱动、蓝牙驱动、Wi-Fi驱动、电源管理等。</p><h1 id="探究新语言，快速入门Kotlin编程"><a href="#探究新语言，快速入门Kotlin编程" class="headerlink" title="探究新语言，快速入门Kotlin编程"></a>探究新语言，快速入门Kotlin编程</h1><p>详见<a href="https://droidyu.github.io/notes/first_code_3_kotlin/">【学习笔记】之《第一行代码(第3版)》(Kotlin部分)</a></p><h1 id="先从看得见的入手，探究Activity"><a href="#先从看得见的入手，探究Activity" class="headerlink" title="先从看得见的入手，探究Activity"></a>先从看得见的入手，探究Activity</h1><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p><code>Intent</code>是Android程序中各组件之间进行交互的一种重要方式，它不仅可以指明当前组件想要执行的动作，还可以在不同组件之间传递数据。</p><h3 id="显式Intent"><a href="#显式Intent" class="headerlink" title="显式Intent"></a>显式Intent</h3><p>显式<code>Intent</code>可以用于明确指定启动某个<code>Activity</code>，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">button1.setOnClickListener &#123;    <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, SecondActivity::<span class="keyword">class</span>.java)    startActivity(intent)&#125;</span><br></pre></td></tr></table></figure><h3 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h3><p>隐式<code>Intent</code>并不明确指出想要启动哪一个<code>Activity</code>，而是指定了一系列更为抽象的<code>action</code>和<code>category</code>等信息，然后交由系统去分析这个<code>Intent</code>，并帮我们找出合适的<code>Activity</code>去启动。<br>比如你的应用程序中需要展示一个网页，这时没有必要自己去实现一个浏览器，只需要调用系统的浏览器来打开这个网页就行了。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">button1.setOnClickListener &#123;    <span class="keyword">val</span> intent = Intent(Intent.ACTION_VIEW)    intent.<span class="keyword">data</span> = Uri.parse(<span class="string">&quot;https://www.baidu.com&quot;</span>)    startActivity(intent)&#125;</span><br></pre></td></tr></table></figure><h2 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h2><p><img src="https://pic.imgdb.cn/item/61ee96e62ab3f51d9171a537.png"></p><ul><li><p><code>onCreate()</code> 这个方法在<code>Activity</code>第一次被创建的时候调用。</p></li><li><p><code>onStart()</code> 这个方法在<code>Activity</code>由不可见变为可见的时候调用。</p></li><li><p><code>onResume()</code> 这个方法在<code>Activity</code>准备好和用户进行交互的时候调用。</p></li><li><p><code>onPause()</code> 这个方法在系统准备去启动或者恢复另一个<code>Activity</code>的时候调用。</p></li><li><p><code>onStop()</code> 这个方法在<code>Activity</code>完全不可见的时候调用。</p></li><li><p><code>onDestroy()</code> 这个方法在<code>Activity</code>被销毁之前调用。</p></li><li><p><code>onRestart()</code> 这个方法在<code>Activity</code>由停止状态变为运行状态之前调用，也就是<code>Activity</code>被重新启动了。</p><h2 id="Activity的启动模式"><a href="#Activity的启动模式" class="headerlink" title="Activity的启动模式"></a>Activity的启动模式</h2><h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h3><p><img src="https://pic.imgdb.cn/item/61ee97912ab3f51d91723e39.png"></p></li></ul><p><code>standard</code>是<code>Activity</code>默认的启动模式，在不进行显式指定的情况下，所有<code>Activity</code>都会自动使用这种启动模式。</p><p>在<code>standard</code>模式下，每当启动一个新的<code>Activity</code>，它就会在返回栈中入栈，并处于栈顶的位置。</p><p>对于使用<code>standard</code>模式的<code>Activity</code>，系统不会在乎这个<code>Activity</code>是否已经在返回栈中存在，每次启动都会创建一个该<code>Activity</code>的新实例。</p><h3 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h3><p><img src="https://pic.imgdb.cn/item/61ee98502ab3f51d9172ef82.png"></p><p>当<code>Activity</code>的启动模式指定为<code>singleTop</code>，在启动<code>Activity</code>时如果发现返回栈的栈顶已经是该<code>Activity</code>，则认为可以直接使用它，不会再创建新的<code>Activity</code>实例。</p><h3 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h3><p><img src="https://pic.imgdb.cn/item/61ee988e2ab3f51d91732ecf.png"><br>当<code>Activity</code>的启动模式指定为<code>singleTask</code>，每次启动该<code>Activity</code>时，系统首先会在返回栈中检查是否存在该<code>Activity</code>的实例，如果发现已经存在则直接使用该实例，并把在这个<code>Activity</code>之上的所有其他<code>Activity</code>统统出栈，如果没有发现就会创建一个新的<code>Activity</code>实例。</p><h3 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h3><p><img src="https://pic.imgdb.cn/item/61ee98bc2ab3f51d9173567a.png"><br>当<code>Activity</code>的启动模式指定为<code>singleInstance</code>，会启用一个新的返回栈来管理这个<code>Activity</code>。</p><p>假设我们的程序中有一个<code>Activity</code>是允许其他程序调用的，如果想实现其他程序和我们的程序可以共享这个<code>Activity</code>的实例，就可以使用<code>singleInstance</code>模式。</p><p>在这种模式下，会有一个单独的返回栈来管理这个<code>Activity</code>，不管是哪个应用程序来访问这个<code>Activity</code>，都共用的同一个返回栈，也就解决了共享<code>Activity</code>实例的问题。</p><h1 id="软件也要拼脸蛋，UI开发的点点滴滴"><a href="#软件也要拼脸蛋，UI开发的点点滴滴" class="headerlink" title="软件也要拼脸蛋，UI开发的点点滴滴"></a>软件也要拼脸蛋，UI开发的点点滴滴</h1><p>本章主要讲解Android各UI组件的基本使用，由于过于基础，暂不记录笔记。</p><h1 id="手机平板要兼顾，探究Fragment"><a href="#手机平板要兼顾，探究Fragment" class="headerlink" title="手机平板要兼顾，探究Fragment"></a>手机平板要兼顾，探究Fragment</h1><h2 id="动态添加Fragment"><a href="#动态添加Fragment" class="headerlink" title="动态添加Fragment"></a>动态添加Fragment</h2><ul><li>创建待添加<code>Fragment</code>的实例。</li><li>获取<code>FragmentManager</code>，在<code>Activity</code>中可以直接调用<code>getSupportFragmentManager()</code>方法获取。</li><li>开启一个事务，通过调用<code>beginTransaction()</code>方法开启。</li><li>向容器内添加或替换<code>Fragment</code>，一般使用<code>replace()</code>方法实现，需要传入容器的<code>id</code>和待添加的<code>Fragment</code>实例。</li><li>提交事务，调用<code>commit()</code>方法来完成。<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;        <span class="keyword">super</span>.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        button.setOnClickListener &#123;            replaceFragment(AnotherRightFragment())        &#125;    &#125;    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">replaceFragment</span><span class="params">(fragment: <span class="type">Fragment</span>)</span></span> &#123;        <span class="keyword">val</span> fragmentManager = supportFragmentManager        <span class="keyword">val</span> transaction = fragmentManager.beginTransaction()        transaction.replace(R.id.rightLayout, fragment)        transaction.commit()    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="在Fragment中实现返回栈"><a href="#在Fragment中实现返回栈" class="headerlink" title="在Fragment中实现返回栈"></a>在Fragment中实现返回栈</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">transaction.addToBackStack(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h2 id="Fragment的生命周期"><a href="#Fragment的生命周期" class="headerlink" title="Fragment的生命周期"></a>Fragment的生命周期</h2><img src="https://pic.imgdb.cn/item/61ee9bf62ab3f51d91766186.png"></li></ul><h1 id="全局大喇叭，详解广播机制"><a href="#全局大喇叭，详解广播机制" class="headerlink" title="全局大喇叭，详解广播机制"></a>全局大喇叭，详解广播机制</h1><p>为了便于进行系统级别的消息通知，Android引入了一套广播消息机制。</p><p>每个应用程序都可以对自己感兴趣的广播进行注册，这样该程序就只会收到自己所关心的广播内容，这些广播可能是来自于系统的，也可能是来自于其他应用程序的。Android提供了一套完整的API，允许应用程序自由地发送和接收广播。</p><p>Android中的广播主要可以分为两种类型：标准广播和有序广播。</p><h2 id="标准广播"><a href="#标准广播" class="headerlink" title="标准广播"></a>标准广播</h2><p>标准广播（normal broadcasts）是一种完全异步执行的广播，在广播发出之后，所有的<code>BroadcastReceiver</code>几乎都会在同一时刻接收到收到这条广播消息，因此它们之间没有任何先后顺序可言。这种广播的效率会比较高，但同时也意味着它是无法被截断的。示意图如下：<br><img src="https://pic.imgdb.cn/item/61eea1ab2ab3f51d917bef95.png"></p><h2 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h2><p>有序广播（ordered broadcasts）是一种同步执行的广播，在广播发出之后，同一时刻只会有一个<code>BroadcastReceiver</code>能够收到这条广播消息，当这个<code>BroadcastReceiver</code>中的逻辑执行完毕后，广播才会继续传递。所以此时的<code>BroadcastReceiver</code>是有先后顺序的，优先级高的<code>BroadcastReceiver</code>就可以先收到广播消息，并且前面的<code>BroadcastReceiver</code>还可以截断正在传递的广播，这样后面的<code>BroadcastReceiver</code>就无法收到广播消息了。示意图如下：<br><img src="https://pic.imgdb.cn/item/61eea1c12ab3f51d917c0753.jpg"></p><h2 id="接收、发送广播"><a href="#接收、发送广播" class="headerlink" title="接收、发送广播"></a>接收、发送广播</h2><p>开发者可以根据自己感兴趣的广播，自由地注册<code>BroadcastReceiver</code>，这样当有相应的广播发出时，相应的<code>BroadcastReceiver</code>就能够收到该广播，并可以在内部进行逻辑处理。</p><p>注册<code>BroadcastReceiver</code>的方式一般有两种：在代码中注册和在<code>AndroidManifest.xml</code>中注册。其中前者也被称为动态注册，后者也被称为静态注册。</p><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册的代码示例如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;    <span class="keyword">lateinit</span> <span class="keyword">var</span> timeChangeReceiver: TimeChangeReceiver    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;        <span class="keyword">super</span>.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        <span class="keyword">val</span> intentFilter = IntentFilter()        intentFilter.addAction(<span class="string">&quot;android.intent.action.TIME_TICK&quot;</span>)        timeChangeReceiver = TimeChangeReceiver()        registerReceiver(timeChangeReceiver, intentFilter)    &#125;    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;        <span class="keyword">super</span>.onDestroy()        unregisterReceiver(timeChangeReceiver)    &#125;    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeChangeReceiver</span> : <span class="type">BroadcastReceiver</span></span>() &#123;        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onReceive</span><span class="params">(context: <span class="type">Context</span>, intent: <span class="type">Intent</span>)</span></span> &#123;            Toast.makeText(context, <span class="string">&quot;Time has changed&quot;</span>, Toast.LENGTH_SHORT).show()        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册的代码示例如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BootCompleteReceiver</span> : <span class="type">BroadcastReceiver</span></span>() &#123;    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onReceive</span><span class="params">(context: <span class="type">Context</span>, intent: <span class="type">Intent</span>)</span></span> &#123;        Toast.makeText(context, <span class="string">&quot;Boot Complete&quot;</span>, Toast.LENGTH_LONG).show()    &#125;&#125;</span><br></pre></td></tr></table></figure><p>另外，静态的<code>BroadcastReceiver</code>一定要在<code>AndroidManifest.xml</code>文件中注册才可以使用：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span><span class="attr">package</span>=<span class="string">&quot;com.example.broadcasttest&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">application</span>        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span>        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span>        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span>        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span>        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span>        <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span>&gt;</span>        …        <span class="tag">&lt;<span class="name">receiver</span>            <span class="attr">android:name</span>=<span class="string">&quot;.BootCompleteReceiver&quot;</span>            <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span>            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span> /&gt;</span>            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span>    <span class="tag">&lt;/<span class="name">application</span>&gt;</span><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>构建一个<code>Intent</code>对象，并把要发送的广播的值传入。然后调用<code>Intent</code>的<code>setPackage()</code>方法，并传入当前应用程序的包名。最后调用<code>sendBroadcast()</code>方法将广播发送出去，这样所有监听<code>com.example.broadcasttest.MY_BROADCAST</code>这条广播的<code>BroadcastReceiver</code>就会收到消息了。此时发出去的广播就是一条标准广播。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;        <span class="keyword">super</span>.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        button.setOnClickListener &#123;            <span class="keyword">val</span> intent = Intent(<span class="string">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>)            intent.setPackage(packageName)            sendBroadcast(intent)        &#125;    &#125;    &#125;</span><br></pre></td></tr></table></figure><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>和标准广播不同，有序广播是一种同步执行的广播，并且是可以被截断的。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;        <span class="keyword">super</span>.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        button.setOnClickListener &#123;            <span class="keyword">val</span> intent = Intent(<span class="string">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>)            intent.setPackage(packageName)            sendOrderedBroadcast(intent, <span class="literal">null</span>)        &#125;    &#125;    &#125;</span><br></pre></td></tr></table></figure><p>发送有序广播只需要改动一行代码，即将<code>sendBroadcast()</code>方法改成<code>sendOrderedBroadcast()</code>方法。</p><h1 id="数据库存储全方案，详解持久化技术"><a href="#数据库存储全方案，详解持久化技术" class="headerlink" title="数据库存储全方案，详解持久化技术"></a>数据库存储全方案，详解持久化技术</h1><p>数据持久化就是指将那些内存中的瞬时数据保存到存储设备中，保证即使在手机或计算机关机的情况下，这些数据仍然不会丢失。</p><p>保存在内存中的数据是处于瞬时状态的，而保存在存储设备中的数据是处于持久状态的。持久化技术提供了一种机制，可以让数据在瞬时状态和持久状态之间进行转换。</p><p>Android系统中主要提供了3种方式用于简单地实现数据持久化功能：文件存储、<code>SharedPreferences</code>存储以及数据库存储。</p><h2 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h2><p>文件存储是Android中最基本的数据存储方式，它不对存储的内容进行任何格式化处理，所有数据都是原封不动地保存到文件当中的，因而它比较适合存储一些简单的文本数据或二进制数据。</p><p>如果你想使用文件存储的方式来保存一些较为复杂的结构化数据，就需要定义一套自己的格式规范，方便之后将数据从文件中重新解析出来。</p><h3 id="将数据存储到文件中"><a href="#将数据存储到文件中" class="headerlink" title="将数据存储到文件中"></a>将数据存储到文件中</h3><p><code>Context</code>类中提供了一个<code>openFileOutput()</code>方法，可以用于将数据存储到指定的文件中。</p><p>所有的文件会默认存储到<code>/data/data/&lt;package name&gt;/files/</code>目录下。示例写法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">save</span><span class="params">(inputText: <span class="type">String</span>)</span></span> &#123;    <span class="keyword">try</span> &#123;        <span class="keyword">val</span> output = openFileOutput(<span class="string">&quot;data&quot;</span>, Context.MODE_PRIVATE)        <span class="keyword">val</span> writer = BufferedWriter(OutputStreamWriter(output))        writer.use &#123;            it.write(inputText)        &#125;    &#125; <span class="keyword">catch</span> (e: IOException) &#123;        e.printStackTrace()    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h3><p><code>Context</code>类中还提供了一个<code>openFileInput()</code>方法，用于从文件中读取数据。</p><p>它会自动到<code>/data/data/&lt;package name&gt;/files/</code>目录下加载文件，并返回一个<code>FileInputStream</code>对象，得到这个对象之后，再通过流的方式就可以将数据读取出来了。示例写法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">load</span><span class="params">()</span></span>: String &#123;    <span class="keyword">val</span> content = StringBuilder()    <span class="keyword">try</span> &#123;        <span class="keyword">val</span> input = openFileInput(<span class="string">&quot;data&quot;</span>)        <span class="keyword">val</span> reader = BufferedReader(InputStreamReader(input))        reader.use &#123;            reader.forEachLine &#123;                content.append(it)            &#125;        &#125;    &#125; <span class="keyword">catch</span> (e: IOException) &#123;        e.printStackTrace()    &#125;    <span class="keyword">return</span> content.toString()&#125;</span><br></pre></td></tr></table></figure><h2 id="SharedPreferences存储"><a href="#SharedPreferences存储" class="headerlink" title="SharedPreferences存储"></a>SharedPreferences存储</h2><p>不同于文件的存储方式，<code>SharedPreferences</code>是使用键值对的方式来存储数据的。</p><p>也就是说，当保存一条数据的时候，需要给这条数据提供一个对应的键，这样在读取数据的时候就可以通过这个键把相应的值取出来。</p><p><code>SharedPreferences</code>还支持多种不同的数据类型存储，如果存储的数据类型是整型，那么读取出来的数据也是整型的；如果存储的数据是一个字符串，那么读取出来的数据仍然是字符串。</p><h3 id="将数据存储到SharedPreferences中"><a href="#将数据存储到SharedPreferences中" class="headerlink" title="将数据存储到SharedPreferences中"></a>将数据存储到SharedPreferences中</h3><p>向<code>SharedPreferences</code>文件中存储数据了，主要可以分为3步实现。</p><ul><li><p>调用<code>SharedPreferences</code>对象的<code>edit()</code>方法获取一个<code>SharedPreferences.Editor</code>对象。</p></li><li><p>向<code>SharedPreferences.Editor</code>对象中添加数据，比如添加一个布尔型数据就使用<code>putBoolean()</code>方法，添加一个字符串则使用<code>putString()</code>方法，以此类推。</p></li><li><p>调用<code>apply()</code>方法将添加的数据提交，从而完成数据存储操作。<br>示例写法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> editor = getSharedPreferences(<span class="string">&quot;data&quot;</span>, Context.MODE_PRIVATE).edit()editor.putString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>)editor.putInt(<span class="string">&quot;age&quot;</span>, <span class="number">28</span>)editor.putBoolean(<span class="string">&quot;married&quot;</span>, <span class="literal">false</span>)editor.apply()</span><br></pre></td></tr></table></figure><h3 id="从SharedPreferences中读取数据"><a href="#从SharedPreferences中读取数据" class="headerlink" title="从SharedPreferences中读取数据"></a>从SharedPreferences中读取数据</h3><p><code>SharedPreferences</code>对象中提供了一系列的<code>get</code>方法，用于对存储的数据进行读取，每种<code>get</code>方法都对应了<code>SharedPreferences.Editor</code>中的一种<code>put</code>方法。<br>比如读取一个布尔型数据就使用<code>getBoolean()</code>方法，读取一个字符串就使用<code>getString()</code>方法。</p></li></ul><p>示例写法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> prefs = getSharedPreferences(<span class="string">&quot;data&quot;</span>, Context.MODE_PRIVATE)<span class="keyword">val</span> name = prefs.getString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;&quot;</span>)<span class="keyword">val</span> age = prefs.getInt(<span class="string">&quot;age&quot;</span>, <span class="number">0</span>)<span class="keyword">val</span> married = prefs.getBoolean(<span class="string">&quot;married&quot;</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h2 id="数据库存储"><a href="#数据库存储" class="headerlink" title="数据库存储"></a>数据库存储</h2><p>SQLite是一款轻量级的关系型数据库，它的运算速度非常快，占用资源很少，通常只需要几百KB的内存就足够了，因而特别适合在移动设备上使用。</p><p>SQLite不仅支持标准的SQL语法，还遵循了数据库的ACID事务，所以只要你以前使用过其他的关系型数据库，就可以很快地上手SQLite。而SQLite又比一般的数据库要简单得多，它甚至不用设置用户名和密码就可以使用。</p><p>Android正是把这个功能极为强大的数据库嵌入到了系统当中，使得本地持久化的功能有了一次质的飞跃。</p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>Android为了让我们能够更加方便地管理数据库，专门提供了一个<code>SQLiteOpenHelper</code>帮助类，借助这个类可以非常简单地对数据库进行创建和升级。示例写法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDatabaseHelper</span></span>(<span class="keyword">val</span> context: Context, name: String, version: <span class="built_in">Int</span>) : SQLiteOpenHelper(context, name, <span class="literal">null</span>, version) &#123;    <span class="keyword">private</span> <span class="keyword">val</span> createBook = <span class="string">&quot;create table Book (&quot;</span> +            <span class="string">&quot;id integer primary key autoincrement,&quot;</span> +            <span class="string">&quot;author text,&quot;</span> +            <span class="string">&quot;price real,&quot;</span> +            <span class="string">&quot;pages integer,&quot;</span> +            <span class="string">&quot;name text)&quot;</span>    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(db: <span class="type">SQLiteDatabase</span>)</span></span> &#123;        db.execSQL(createBook)        Toast.makeText(context, <span class="string">&quot;Create succeeded&quot;</span>, Toast.LENGTH_SHORT).show()    &#125;    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onUpgrade</span><span class="params">(db: <span class="type">SQLiteDatabase</span>, oldVersion: <span class="type">Int</span>, newVersion: <span class="type">Int</span>)</span></span> &#123;    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="升级数据库"><a href="#升级数据库" class="headerlink" title="升级数据库"></a>升级数据库</h3><p><code>onUpgrade()</code>方法是用于对数据库进行升级的，它在整个数据库的管理工作当中起着非常重要的作用。示例写法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDatabaseHelper</span></span>(<span class="keyword">val</span> context: Context, name: String, version: <span class="built_in">Int</span>) : SQLiteOpenHelper(context, name, <span class="literal">null</span>, version) &#123;    …    <span class="keyword">private</span> <span class="keyword">val</span> createCategory = <span class="string">&quot;create table Category (&quot;</span> +            <span class="string">&quot;id integer primary key autoincrement,&quot;</span> +            <span class="string">&quot;category_name text,&quot;</span> +            <span class="string">&quot;category_code integer)&quot;</span>    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(db: <span class="type">SQLiteDatabase</span>)</span></span> &#123;        db.execSQL(createBook)        db.execSQL(createCategory)        Toast.makeText(context, <span class="string">&quot;Create succeeded&quot;</span>, Toast.LENGTH_SHORT).show()    &#125;    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onUpgrade</span><span class="params">(db: <span class="type">SQLiteDatabase</span>, oldVersion: <span class="type">Int</span>, newVersion: <span class="type">Int</span>)</span></span> &#123;        db.execSQL(<span class="string">&quot;drop table if exists Book&quot;</span>)        db.execSQL(<span class="string">&quot;drop table if exists Category&quot;</span>)        onCreate(db)    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p><code>SQLiteDatabase</code>中提供了一个<code>insert()</code>方法，专门用于添加数据。它接收3个参数：</p><p>第一个参数是表名，我们希望向哪张表里添加数据，这里就传入该表的名字；第二个参数用于在未指定添加数据的情况下给某些可为空的列自动赋值<code>NULL</code>，一般我们用不到这个功能，直接传入<code>null</code>即可；第三个参数是一个<code>ContentValues</code>对象，它提供了一系列的<code>put()</code>方法重载，用于向<code>ContentValues</code>中添加数据，只需要将表中的每个列名以及相应的待添加数据传入即可。</p><p>示例写法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> dbHelper = MyDatabaseHelper(<span class="keyword">this</span>, <span class="string">&quot;BookStore.db&quot;</span>, <span class="number">2</span>)<span class="keyword">val</span> db = dbHelper.writableDatabase<span class="keyword">val</span> values1 = ContentValues().apply &#123;    <span class="comment">// 开始组装第一条数据</span>    put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;The Da Vinci Code&quot;</span>)    put(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;Dan Brown&quot;</span>)    put(<span class="string">&quot;pages&quot;</span>, <span class="number">454</span>)    put(<span class="string">&quot;price&quot;</span>, <span class="number">16.96</span>)&#125;db.insert(<span class="string">&quot;Book&quot;</span>, <span class="literal">null</span>, values1) <span class="comment">// 插入一条数据</span></span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p><code>SQLiteDatabase</code>中提供了一个非常好用的<code>update()</code>方法，用于对数据进行更新。</p><p>这个方法接收4个参数：第一个参数和<code>insert()</code>方法一样，也是表名，指定更新哪张表里的数据；第二个参数是<code>ContentValues</code>对象，要把更新数据在这里组装进去；第三、第四个参数用于约束更新某一行或某几行中的数据，不指定的话默认会更新所有行。</p><p>示例写法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> dbHelper = MyDatabaseHelper(<span class="keyword">this</span>, <span class="string">&quot;BookStore.db&quot;</span>, <span class="number">2</span>)            <span class="keyword">val</span> db = dbHelper.writableDatabase<span class="keyword">val</span> values = ContentValues()values.put(<span class="string">&quot;price&quot;</span>, <span class="number">10.99</span>)db.update(<span class="string">&quot;Book&quot;</span>, values, <span class="string">&quot;name = ?&quot;</span>, arrayOf(<span class="string">&quot;The Da Vinci Code&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p><code>SQLiteDatabase</code>中提供了一个<code>delete()</code>方法，专门用于删除数据。</p><p>这个方法接收3个参数：第一个参数仍然是表名，这个没什么好说的；第二、第三个参数用于约束删除某一行或某几行的数据，不指定的话默认会删除所有行。</p><p>示例写法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> dbHelper = MyDatabaseHelper(<span class="keyword">this</span>, <span class="string">&quot;BookStore.db&quot;</span>, <span class="number">2</span>)<span class="keyword">val</span> db = dbHelper.writableDatabasedb.delete(<span class="string">&quot;Book&quot;</span>, <span class="string">&quot;pages &gt; ?&quot;</span>, arrayOf(<span class="string">&quot;500&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p><code>SQLiteDatabase</code>中还提供了一个<code>query()</code>方法用于对数据进行查询。这个方法的参数非常复杂，最短的一个方法重载也需要传入7个参数。参数的详细解释见下表：</p><table><thead><tr><th>query()方法参数</th><th>对于SQL部分</th><th>描述</th></tr></thead><tbody><tr><td>table</td><td>from table_name</td><td>指定查询的表名</td></tr><tr><td>columns</td><td>select column1,column2</td><td>指定查询的列名</td></tr><tr><td>selection</td><td>where column = value</td><td>指定where的约束条件</td></tr><tr><td>selectionArgs</td><td>-</td><td>为where中的占位符提供具体的值</td></tr><tr><td>groupBy</td><td>group by column</td><td>指定需要group by的列</td></tr><tr><td>having</td><td>having column = value</td><td>对group by后的结果进一步约束</td></tr><tr><td>orderBy</td><td>order by column1,column2</td><td>指定查询结果的排序方式</td></tr></tbody></table><p>查询<code>Book</code>表中所有数据的示例写法：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> dbHelper = MyDatabaseHelper(<span class="keyword">this</span>, <span class="string">&quot;BookStore.db&quot;</span>, <span class="number">2</span>)<span class="keyword">val</span> db = dbHelper.writableDatabase<span class="comment">// 查询Book表中所有的数据</span><span class="keyword">val</span> cursor = db.query(<span class="string">&quot;Book&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>)<span class="keyword">if</span> (cursor.moveToFirst()) &#123;    <span class="keyword">do</span> &#123;        <span class="comment">// 遍历Cursor对象，取出数据并打印</span>        <span class="keyword">val</span> name = cursor.getString(cursor.getColumnIndex(<span class="string">&quot;name&quot;</span>))        <span class="keyword">val</span> author = cursor.getString(cursor.getColumnIndex(<span class="string">&quot;author&quot;</span>))        <span class="keyword">val</span> pages = cursor.getInt(cursor.getColumnIndex(<span class="string">&quot;pages&quot;</span>))        <span class="keyword">val</span> price = cursor.getDouble(cursor.getColumnIndex(<span class="string">&quot;price&quot;</span>))        Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book name is <span class="variable">$name</span>&quot;</span>)        Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book author is <span class="variable">$author</span>&quot;</span>)        Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book pages is <span class="variable">$pages</span>&quot;</span>)        Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book price is <span class="variable">$price</span>&quot;</span>)    &#125; <span class="keyword">while</span> (cursor.moveToNext())&#125;cursor.close()</span><br></pre></td></tr></table></figure><h3 id="使用SQL操作数据库"><a href="#使用SQL操作数据库" class="headerlink" title="使用SQL操作数据库"></a>使用SQL操作数据库</h3><p>当然我们也可以使用SQL语句来完成前面的所有功能。<br>添加数据的方法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">db.execSQL(    “insert into Book (name, author, pages, price) values(?, ?, ?, ?)”, arrayOf(<span class="string">&quot;The Da Vinci Code&quot;</span>, <span class="string">&quot;Dan Brown&quot;</span>, <span class="string">&quot;454&quot;</span>, <span class="string">&quot;16.96&quot;</span>))</span><br></pre></td></tr></table></figure><p>更新数据的方法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">db.execSQL(<span class="string">&quot;update Book set price = ? where name = ?&quot;</span>, arrayOf(<span class="string">&quot;10.99&quot;</span>, <span class="string">&quot;The Da Vinci Code&quot;</span>))</span><br></pre></td></tr></table></figure><p>删除数据的方法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">db.execSQL(<span class="string">&quot;delete from Book where pages &gt; ?&quot;</span>, arrayOf(<span class="string">&quot;500&quot;</span>))</span><br></pre></td></tr></table></figure><p>查询数据的方法如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> cursor = db.rawQuery(<span class="string">&quot;select * from Book&quot;</span>, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h1 id="跨程序共享数据，探究ContentProvider"><a href="#跨程序共享数据，探究ContentProvider" class="headerlink" title="跨程序共享数据，探究ContentProvider"></a>跨程序共享数据，探究ContentProvider</h1><p><code>ContentProvider</code>主要用于在不同的应用程序之间实现数据共享的功能，它提供了一套完整的机制，允许一个程序访问另一个程序中的数据，同时还能保证被访问数据的安全性。</p><p>目前，使用<code>ContentProvider</code>是Android实现跨程序共享数据的标准方式。</p><h2 id="ContentResolver的基本用法"><a href="#ContentResolver的基本用法" class="headerlink" title="ContentResolver的基本用法"></a>ContentResolver的基本用法</h2><p><code>ContentResolver</code>中的增删改查方法都不接收表名参数，而是使用一个<code>Uri</code>参数代替，这个参数被称为内容<code>URI</code>。</p><p>内容URI给<code>ContentProvider</code>中的数据建立了唯一标识符，它主要由两部分组成：<code>authority</code>和<code>path</code>。</p><p>内容URI最标准的格式如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">content:<span class="comment">//com.example.app.provider/table1</span>content:<span class="comment">//com.example.app.provider/table2</span></span><br></pre></td></tr></table></figure><p>得到了内容<code>URI</code>字符串之后，我们只需要调用<code>Uri.parse()</code>方法，就可以将内容<code>URI</code>字符串解析成<code>Uri</code>对象了。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> uri = Uri.parse(<span class="string">&quot;content://com.example.app.provider/table1&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="读取系统联系人"><a href="#读取系统联系人" class="headerlink" title="读取系统联系人"></a>读取系统联系人</h3><p>读取系统联系人示例写法如下（省略了申请运行时权限部分）：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;    <span class="keyword">private</span> <span class="keyword">val</span> contactsList = ArrayList&lt;String&gt;()    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> adapter: ArrayAdapter&lt;String&gt;    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;        <span class="keyword">super</span>.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        adapter = ArrayAdapter(<span class="keyword">this</span>, android.R.layout.simple_list_item_1, contactsList)        contactsView.adapter = adapter        ……        readContacts()    &#125;    ……    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">readContacts</span><span class="params">()</span></span> &#123;        <span class="comment">// 查询联系人数据</span>        contentResolver.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>)?.apply &#123;            <span class="keyword">while</span> (moveToNext()) &#123;                <span class="comment">// 获取联系人姓名</span>                <span class="keyword">val</span> displayName = getString(getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME))                <span class="comment">// 获取联系人手机号</span>                <span class="keyword">val</span> number = getString(getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER))                contactsList.add(<span class="string">&quot;<span class="variable">$displayName</span>\n<span class="variable">$number</span>&quot;</span>)            &#125;            adapter.notifyDataSetChanged()            close()        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="创建自己的ContentProvider"><a href="#创建自己的ContentProvider" class="headerlink" title="创建自己的ContentProvider"></a>创建自己的ContentProvider</h2><h3 id="创建ContentProvider的步骤"><a href="#创建ContentProvider的步骤" class="headerlink" title="创建ContentProvider的步骤"></a>创建ContentProvider的步骤</h3><p><code>ContentProvider</code>类中有6个抽象方法，我们在使用子类继承它的时候，需要将这6个方法全部重写。</p><ul><li><p><code>onCreate()</code>。初始化<code>ContentProvider</code>的时候调用。通常会在这里完成对数据库的创建和升级等操作，返回<code>true</code>表示<code>ContentProvider</code>初始化成功，返回<code>false</code>则表示失败。</p></li><li><p><code>query()</code>。从<code>ContentProvider</code>中查询数据。<code>uri</code>参数用于确定查询哪张表，<code>projection</code>参数用于确定查询哪些列，<code>selection</code>和<code>selectionArgs</code>参数用于约束查询哪些行，<code>sortOrder</code>参数用于对结果进行排序，查询的结果存放在<code>Cursor</code>对象中返回。</p></li><li><p><code>insert()</code>。向<code>ContentProvider</code>中添加一条数据。<code>uri</code>参数用于确定要添加到的表，待添加的数据保存在<code>values</code>参数中。添加完成后，返回一个用于表示这条新记录的<code>URI</code>。</p></li><li><p><code>update()</code>。更新<code>ContentProvider</code>中已有的数据。<code>uri</code>参数用于确定更新哪一张表中的数据，新数据保存在<code>values</code>参数中，<code>selection</code>和<code>selectionArgs</code>参数用于约束更新哪些行，受影响的行数将作为返回值返回。</p></li><li><p><code>delete()</code>。从<code>ContentProvider</code>中删除数据。<code>uri</code>参数用于确定删除哪一张表中的数据，<code>selection</code>和<code>selectionArgs</code>参数用于约束删除哪些行，被删除的行数将作为返回值返回。</p></li><li><p><code>getType()</code>。根据传入的内容<code>URI</code>返回相应的<code>MIME</code>类型。</p><h3 id="实现跨程序数据共享"><a href="#实现跨程序数据共享" class="headerlink" title="实现跨程序数据共享"></a>实现跨程序数据共享</h3><p>借助<code>UriMatcher</code>这个类能够轻松地实现匹配内容<code>URI</code>的功能。当调用<code>UriMatcher</code>的<code>match()</code>方法时，可以将一个<code>Uri</code>对象传入，返回值是某个能够匹配这个<code>Uri</code>对象所对应的自定义代码，利用这个代码，就可以判断出调用方期望访问的是哪张表中的数据了。示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProvider</span> : <span class="type">ContentProvider</span></span>() &#123;    <span class="keyword">private</span> <span class="keyword">val</span> table1Dir = <span class="number">0</span>    <span class="keyword">private</span> <span class="keyword">val</span> table1Item = <span class="number">1</span>    <span class="keyword">private</span> <span class="keyword">val</span> table2Dir = <span class="number">2</span>    <span class="keyword">private</span> <span class="keyword">val</span> table2Item = <span class="number">3</span>    <span class="keyword">private</span> <span class="keyword">val</span> uriMatcher = UriMatcher(UriMatcher.NO_MATCH)    <span class="keyword">init</span> &#123;        uriMatcher.addURI(<span class="string">&quot;com.example.app.provider&quot;</span>, <span class="string">&quot;table1&quot;</span>, table1Dir)        uriMatcher.addURI(<span class="string">&quot;com.example.app.provider &quot;</span>, <span class="string">&quot;table1/#&quot;</span>, table1Item)        uriMatcher.addURI(<span class="string">&quot;com.example.app.provider &quot;</span>, <span class="string">&quot;table2&quot;</span>, table2Dir)        uriMatcher.addURI(<span class="string">&quot;com.example.app.provider &quot;</span>, <span class="string">&quot;table2/#&quot;</span>, table2Item)    &#125;    …    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">query</span><span class="params">(uri: <span class="type">Uri</span>, projection: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;?, selection: <span class="type">String</span>?, selectionArgs: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;?, sortOrder: <span class="type">String</span>?)</span></span>: Cursor? &#123;        <span class="keyword">when</span> (uriMatcher.match(uri)) &#123;            table1Dir -&gt; &#123;                <span class="comment">// 查询table1表中的所有数据</span>            &#125;            table1Item -&gt; &#123;                <span class="comment">// 查询table1表中的单条数据</span>            &#125;            table2Dir -&gt; &#123;                <span class="comment">// 查询table2表中的所有数据</span>            &#125;            table2Item -&gt; &#123;                <span class="comment">// 查询table2表中的单条数据</span>            &#125;        &#125;        …    &#125;    …&#125;</span><br></pre></td></tr></table></figure><p><code>getType()</code>方法是所有的<code>ContentProvider</code>都必须提供的一个方法，用于获取<code>Uri</code>对象所对应的<code>MIME</code>类型。一个内容<code>URI</code>所对应的<code>MIME</code>字符串主要由3部分组成，Android对这3个部分做了如下格式规定。</p></li><li><p>必须以<code>vnd</code>开头。</p></li><li><p>如果内容<code>URI</code>以路径结尾，则后接<code>android.cursor.dir/</code>；如果内容<code>URI</code>以<code>id</code>结尾，则后接<code>android.cursor.item/</code>。</p></li><li><p>最后接上<code>vnd.&lt;authority&gt;.&lt;path&gt;</code>。</p></li></ul><p>所以，对于<code>content://com.example.app.provider/table1</code>这个内容<code>URI</code>，它所对应的<code>MIME</code>类型就可以写成：<code>vnd.android.cursor.dir/vnd.com.example.app.provider.table1</code></p><p>对于<code>content://com.example.app.provider/table1/1</code>这个内容<code>URI</code>，它所对应的<code>MIME</code>类型就可以写成：<code>vnd.android.cursor.item/vnd.com.example.app.provider.table1</code></p><p><code>getType()</code>方法中的逻辑，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProvider</span> : <span class="type">ContentProvider</span></span>() &#123;    …    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getType</span><span class="params">(uri: <span class="type">Uri</span>)</span></span> = <span class="keyword">when</span> (uriMatcher.match(uri)) &#123;            table1Dir -&gt; <span class="string">&quot;vnd.android.cursor.dir/vnd.com.example.app.provider.table1&quot;</span>            table1Item -&gt; <span class="string">&quot;vnd.android.cursor.item/vnd.com.example.app.provider.table1&quot;</span>            table2Dir -&gt; <span class="string">&quot;vnd.android.cursor.dir/vnd.com.example.app.provider.table2&quot;</span>            table2Item -&gt; <span class="string">&quot;vnd.android.cursor.item/vnd.com.example.app.provider.table2&quot;</span>            <span class="keyword">else</span> -&gt; <span class="literal">null</span>    &#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="丰富你的程序，运用手机多媒体"><a href="#丰富你的程序，运用手机多媒体" class="headerlink" title="丰富你的程序，运用手机多媒体"></a>丰富你的程序，运用手机多媒体</h1><h1 id="后台默默的劳动者，探究Service"><a href="#后台默默的劳动者，探究Service" class="headerlink" title="后台默默的劳动者，探究Service"></a>后台默默的劳动者，探究Service</h1><h1 id="看看精彩的世界，使用网络技术"><a href="#看看精彩的世界，使用网络技术" class="headerlink" title="看看精彩的世界，使用网络技术"></a>看看精彩的世界，使用网络技术</h1><h1 id="最佳的UI体验，MaterialDesign实战"><a href="#最佳的UI体验，MaterialDesign实战" class="headerlink" title="最佳的UI体验，MaterialDesign实战"></a>最佳的UI体验，MaterialDesign实战</h1><h1 id="高级程序开发组件，探究Jetpack"><a href="#高级程序开发组件，探究Jetpack" class="headerlink" title="高级程序开发组件，探究Jetpack"></a>高级程序开发组件，探究Jetpack</h1><h1 id="继续进阶，你还应该掌握的高级技巧"><a href="#继续进阶，你还应该掌握的高级技巧" class="headerlink" title="继续进阶，你还应该掌握的高级技巧"></a>继续进阶，你还应该掌握的高级技巧</h1><h1 id="进入实战，开发一个天气预报App"><a href="#进入实战，开发一个天气预报App" class="headerlink" title="进入实战，开发一个天气预报App"></a>进入实战，开发一个天气预报App</h1><h1 id="编写并发布一个开源库，PermissionX"><a href="#编写并发布一个开源库，PermissionX" class="headerlink" title="编写并发布一个开源库，PermissionX"></a>编写并发布一个开源库，PermissionX</h1><p>（持续更新中。。。）</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 《第一行代码(第3版)》 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
