<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>View体系（七）理解 MeasureSpec</title>
      <link href="/android/view/7-view-MeasureSpec/"/>
      <url>/android/view/7-view-MeasureSpec/</url>
      
        <content type="html"><![CDATA[<p><code>MeasureSpec</code>是<code>View</code>的内部类，<code>MeasureSpec</code> 封装了从父级传递到子级的测量要求。每个 <code>MeasureSpec</code> 代表对宽度或高度的要求。 <code>MeasureSpec</code> 由大小和模式两部分组成。</p><p>更详细的说明请看 <a href="https://developer.android.google.cn/reference/android/view/View.MeasureSpec">Google官方文档</a></p><p>下面是<code>MeasureSpec</code>的源码：<strong>（基于<code>Android 12</code>）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MeasureSpec</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_SHIFT = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_MASK  = <span class="number">0x3</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNSPECIFIED = <span class="number">0</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXACTLY     = <span class="number">1</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AT_MOST     = <span class="number">2</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeMeasureSpec</span><span class="params">(<span class="meta">@IntRange(from = 0, to = (1 &lt;&lt; MeasureSpec.MODE_SHIFT) - 1)</span> <span class="keyword">int</span> size,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="meta">@MeasureSpecMode</span> <span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sUseBrokenMakeMeasureSpec) &#123;</span><br><span class="line">            <span class="keyword">return</span> size + mode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeSafeMeasureSpec</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sUseZeroUnspecifiedMeasureSpec &amp;&amp; mode == UNSPECIFIED) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> makeMeasureSpec(size, mode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (measureSpec &amp; MODE_MASK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (measureSpec &amp; ~MODE_MASK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">adjust</span><span class="params">(<span class="keyword">int</span> measureSpec, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> mode = getMode(measureSpec);</span><br><span class="line">        <span class="keyword">int</span> size = getSize(measureSpec);</span><br><span class="line">        <span class="keyword">if</span> (mode == UNSPECIFIED) &#123;</span><br><span class="line">            <span class="keyword">return</span> makeMeasureSpec(size, UNSPECIFIED);</span><br><span class="line">        &#125;</span><br><span class="line">        size += delta;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            Log.e(VIEW_LOG_TAG, <span class="string">&quot;MeasureSpec.adjust: new size would be negative! (&quot;</span> + size +</span><br><span class="line">                    <span class="string">&quot;) spec: &quot;</span> + toString(measureSpec) + <span class="string">&quot; delta: &quot;</span> + delta);</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> makeMeasureSpec(size, mode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mode = getMode(measureSpec);</span><br><span class="line">        <span class="keyword">int</span> size = getSize(measureSpec);</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;MeasureSpec: &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mode == UNSPECIFIED)</span><br><span class="line">            sb.append(<span class="string">&quot;UNSPECIFIED &quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mode == EXACTLY)</span><br><span class="line">            sb.append(<span class="string">&quot;EXACTLY &quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mode == AT_MOST)</span><br><span class="line">            sb.append(<span class="string">&quot;AT_MOST &quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sb.append(mode).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        sb.append(size);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码可以看出，它代表了32位<code>int</code>值，其中高2位代表<code>mode</code>，低30位代表<code>size</code>。<code>mode</code>指测量模式，<code>size</code>指测量值。mode有3种模式：</p><ul><li><p><code>UNSPECIFIED</code>：未指定模式，父<code>View</code>没有对子<code>View</code>施加任何限制。它可以是任何它想要的大小。</p></li><li><p><code>EXACTLY</code>：精确模式，父<code>View</code>已经确定了子<code>View</code>的确切尺寸。无论子<code>View</code>想要多大，都将获得这些界限。</p></li><li><p><code>AT_MOST</code>：最大模式，子<code>View</code>可以根据需要达到指定的最大的大小。</p></li></ul><p><code>makeMeasureSpec</code>用来保存宽和高的信息，<code>getMode</code>用来获取测量模式，<code>getSize</code>用来获取测量大小。</p><p><code>MeasureSpec</code>受自身<code>LayoutParams</code>和父<code>View</code>的<code>MeasureSpec</code>共同影响。作为顶层<code>View</code>的<code>DecorView</code>来说，其并没有父<code>View</code>，那它的<code>MeasureSpec</code>是如何得来的呢？我们回到<code>ViewRootImpl</code>的<code>performTraversals</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!mStopped || wasReportNextDraw) &#123;</span><br><span class="line"><span class="keyword">boolean</span> focusChangedDueToTouchMode = ensureTouchModeLocally(</span><br><span class="line">        (relayoutResult&amp;WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE) != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (focusChangedDueToTouchMode || mWidth != host.getMeasuredWidth()</span><br><span class="line">        || mHeight != host.getMeasuredHeight() || dispatchApplyInsets ||</span><br><span class="line">        updatedConfiguration) &#123;</span><br><span class="line">    <span class="keyword">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);<span class="comment">//1</span></span><br><span class="line">    <span class="keyword">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_LAYOUT) Log.v(mTag, <span class="string">&quot;Ooops, something changed!  mWidth=&quot;</span></span><br><span class="line">            + mWidth + <span class="string">&quot; measuredWidth=&quot;</span> + host.getMeasuredWidth()</span><br><span class="line">            + <span class="string">&quot; mHeight=&quot;</span> + mHeight</span><br><span class="line">            + <span class="string">&quot; measuredHeight=&quot;</span> + host.getMeasuredHeight()</span><br><span class="line">            + <span class="string">&quot; dispatchApplyInsets=&quot;</span> + dispatchApplyInsets);</span><br><span class="line"></span><br><span class="line">    performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>再看注释1处的<code>getRootMeasureSpec</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRootMeasureSpec</span><span class="params">(<span class="keyword">int</span> windowSize, <span class="keyword">int</span> rootDimension)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> measureSpec;</span><br><span class="line">    <span class="keyword">switch</span> (rootDimension) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.WRAP_CONTENT:</span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> measureSpec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个参数<code>windowSize</code>指窗口到尺寸，所以对于<code>DecorView</code>来说，它的<code>MeasureSpec</code>由自身的<code>LayoutParams</code>和窗口的尺寸决定，这一点和普通的<code>View</code>是不同的。<br>再回到上面看注释2处的<code>performMeasure</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performMeasure</span><span class="params">(<span class="keyword">int</span> childWidthMeasureSpec, <span class="keyword">int</span> childHeightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mView == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">&quot;measure&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);<span class="comment">//1</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1处调用了<code>mView.measure</code>方法，进入了<code>view</code>的<code>measure</code>流程。</p><blockquote><p><strong>关注我</strong></p><ul><li>掘金：<a href="https://juejin.cn/user/2365804752143256">droidYu</a></li><li>CSDN：<a href="https://blog.csdn.net/u010444082">droidYu</a></li><li>Github：<a href="https://github.com/droidYu">droidYu</a></li><li>个人博客：<a href="https://droidyu.github.io/">droidYu</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> View体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View体系 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>View体系（六）View工作流程入口</title>
      <link href="/android/view/6-view-work-entrance/"/>
      <url>/android/view/6-view-work-entrance/</url>
      
        <content type="html"><![CDATA[<p><code>View</code>的工作流程，就是<code>View</code>进行<code>measure</code>、<code>layout</code>和<code>draw</code>的过程，本篇文章我们就来一起看一下<code>View</code>是如何开始他的工作流程的。</p><blockquote><p><strong>（注：文中源码基于 <code>Android 12</code>）</strong></p></blockquote><p>在上篇文章<a href="https://droidyu.github.io/android/view/5-setContentView/">《View体系（五）熟悉又陌生的setContentView》</a>中我们讲过<code>Activity</code>的结构，包括了<code>Activity</code>、<code>PhoneWindow</code>及<code>DecorView</code>。讲了<code>PhoneWindow</code>的创建和<code>DecorView</code>的创建，但此时<code>DecorView</code>还没有加载到<code>PhoneWindow</code>中，下面我们就从源码看一下<code>DecorView</code>是如何加载到<code>PhoneWindow</code>中的。</p><p>当我们调用<code>Activity</code>的<code>startActivity</code>时，最终会调用到<code>ActivityThread</code>的<code>handleLaunchActivity</code>，代码如下：</p><blockquote><p>android.app.ActivityThread</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">handleLaunchActivity</span><span class="params">(ActivityClientRecord r,</span></span></span><br><span class="line"><span class="params"><span class="function">        PendingTransactionActions pendingActions, Intent customIntent)</span> </span>&#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">final</span> Activity a = performLaunchActivity(r, customIntent);<span class="comment">//1</span></span><br><span class="line">        ......</span><br></pre></td></tr></table></figure><p>注释1处调用<code>performLaunchActivity</code>创建了一个<code>Activity</code>，进入<code>performLaunchActivity</code>方法：</p><blockquote><p>android.app.ActivityThread</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">Activity activity = <span class="keyword">null</span>;</span><br><span class="line">...</span><br><span class="line">activity = mInstrumentation.newActivity(</span><br><span class="line">                cl, component.getClassName(), r.intent);<span class="comment">//1</span></span><br><span class="line">...                </span><br><span class="line">activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</span><br><span class="line">                    r.ident, app, r.intent, r.activityInfo, title, r.parent,</span><br><span class="line">                    r.embeddedID, r.lastNonConfigurationInstances, config,</span><br><span class="line">                    r.referrer, r.voiceInteractor, window, r.configCallback,</span><br><span class="line">                    r.assistToken, r.shareableActivityToken);<span class="comment">//2</span></span><br><span class="line">...                    </span><br><span class="line">mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);<span class="comment">//3</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> activity;</span><br></pre></td></tr></table></figure><p>注释1处会通过<code>mInstrumentation</code>的<code>newActivity</code>方法，使用反射的方式，创建<code>Activity</code>的实例，注释2处调用<code>activity.attach</code>方法，在之前的文章中讲过，<code>attach</code>会创建<code>PhoneWindow</code>实例，并赋值给传入的<code>window</code>引用，注释3处最终会调用<code>Activity</code>的<code>OnCreate</code>回调方法，进而调用<code>setContentView</code>方法，创建<code>DecorView</code>。</p><p>在<code>Android12</code>的源码中，<code>handleLaunchActivity</code>方法中并不会直接调用<code>handleResumeActivity</code>方法，而是通过<code>ClientTransaction</code>类来实现调用<code>handleLaunchActivity</code>之后再调用<code>handleResumeActivity</code>，具体的放在后面的文章中讲解。</p><p>我们继续看<code>handleResumeActivity</code>方法：</p><blockquote><p>android.app.ActivityThread</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResumeActivity</span><span class="params">(ActivityClientRecord r, <span class="keyword">boolean</span> finalStateRequest,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">boolean</span> isForward, String reason)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (r.window == <span class="keyword">null</span> &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</span><br><span class="line">            r.window = r.activity.getWindow();</span><br><span class="line">            View decor = r.window.getDecorView();<span class="comment">//1</span></span><br><span class="line">            decor.setVisibility(View.INVISIBLE);</span><br><span class="line">            ViewManager wm = a.getWindowManager();<span class="comment">//2</span></span><br><span class="line">            WindowManager.LayoutParams l = r.window.getAttributes();</span><br><span class="line">            a.mDecor = decor;</span><br><span class="line">            l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</span><br><span class="line">            l.softInputMode |= forwardBit;</span><br><span class="line">            <span class="keyword">if</span> (r.mPreserveWindow) &#123;</span><br><span class="line">                a.mWindowAdded = <span class="keyword">true</span>;</span><br><span class="line">                r.mPreserveWindow = <span class="keyword">false</span>;</span><br><span class="line">                ViewRootImpl impl = decor.getViewRootImpl();</span><br><span class="line">                <span class="keyword">if</span> (impl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    impl.notifyChildRebuilt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a.mVisibleFromClient) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!a.mWindowAdded) &#123;</span><br><span class="line">                    a.mWindowAdded = <span class="keyword">true</span>;</span><br><span class="line">                    wm.addView(decor, l);<span class="comment">//3</span></span><br><span class="line">                    ...</span><br></pre></td></tr></table></figure><p>注释1处得到了<code>DecorView</code>，注释2处得到了<code>WindowManager</code>对象，注释3处调用<code>WindowManager</code>的<code>addView</code>方法，将<code>DecorView</code>作为参数传入，<code>WindowManager</code>的实现类是<code>WindowManagerImpl</code>，所以实际调用的是<code>WindowManagerImpl</code>的<code>addView</code>方法。再看<code>WindowManagerImpl</code>的<code>addView</code>方法：</p><blockquote><p>android.view.WindowManagerImpl</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(<span class="meta">@NonNull</span> View view, <span class="meta">@NonNull</span> ViewGroup.LayoutParams params)</span> </span>&#123;</span><br><span class="line">    applyTokens(params);</span><br><span class="line">    mGlobal.addView(view, params, mContext.getDisplayNoVerify(), mParentWindow,</span><br><span class="line">            mContext.getUserId());<span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1处又调用了<code>WindowManagerGlobal</code>的<code>addView</code>方法：</p><blockquote><p>android.view.WindowManagerGlobal</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, ViewGroup.LayoutParams params,</span></span></span><br><span class="line"><span class="params"><span class="function">        Display display, Window parentWindow, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    ViewRootImpl root;</span><br><span class="line">    ...</span><br><span class="line">    root = <span class="keyword">new</span> ViewRootImpl(view.getContext(), display);<span class="comment">//1</span></span><br><span class="line">    ...</span><br><span class="line">    root.setView(view, wparams, panelParentView, userId);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>注释1处创建了<code>ViewRootImpl</code>实例赋值给<code>root</code>，注释2处将<code>DecorView</code>作为参数传入<code>ViewRootImpl</code>，完成了<code>DecorView</code>和<code>Window</code>的绑定。</p><p><code>ViewRootImpl</code>中还有个方法<code>performTraversals</code>，这个方法使<code>View</code>进入正真的工作流程：</p><blockquote><p>android.view.ViewRootImpl</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performTraversals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);<span class="comment">//1</span></span><br><span class="line">    ...</span><br><span class="line">    performLayout(lp, mWidth, mHeight);<span class="comment">//2</span></span><br><span class="line">    ...</span><br><span class="line">    performDraw();<span class="comment">//3</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>注释1处会执行<code>view</code>的<code>Measure</code>过程，注释2处会执行<code>view</code>的<code>Layout</code>过程，注释3处会执行<code>view</code>的<code>Draw</code>过程。</p><blockquote><p><strong>关注我</strong></p><ul><li>掘金：<a href="https://juejin.cn/user/2365804752143256">droidYu</a></li><li>CSDN：<a href="https://blog.csdn.net/u010444082">droidYu</a></li><li>Github：<a href="https://github.com/droidYu">droidYu</a></li><li>个人博客：<a href="https://droidyu.github.io/">droidYu</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> View体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View体系 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>View体系（五）熟悉又陌生的setContentView</title>
      <link href="/android/view/5-setContentView/"/>
      <url>/android/view/5-setContentView/</url>
      
        <content type="html"><![CDATA[<p>为什么说<code>setContentView</code>熟悉呢？因为该方法是我们从入门Android开发就接触的一个方法，在我们写过的每一个<code>Activity</code>中都有他的身影。但为什么又说<code>setContentView</code>陌生呢？因为我们在日常的开发中只知道用，并没有深入分析该方法是怎么将我们传入的<code>layout</code>资源<code>id</code>变为一个可视的界面的。今天我们就来揭开这层神秘的面纱，扒一扒其中的原理(<strong>注：源码基于Android12</strong>)。</p><p>因为我们日常开发的<code>Activity</code>最终都会继承自<code>android.app.Activity</code>，所以先看<code>Activity</code>类的<code>setContentView</code>方法：</p><blockquote><p>android.app.Activity</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="meta">@LayoutRes</span> <span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">    getWindow().setContentView(layoutResID); <span class="comment">//1</span></span><br><span class="line">    initWindowDecorActionBar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到注释1处其实是调用了<code>getWindow()</code>的<code>setContentView</code>方法，我们再看<code>getWindow()</code>做了什么。</p><blockquote><p>android.app.Activity</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Window <span class="title">getWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mWindow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回了一个<code>mWindow</code>，那<code>mWindow</code>又是什么，看他的声明代码：</p><blockquote><p>android.app.Activity</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line"><span class="keyword">private</span> Window mWindow;</span><br></pre></td></tr></table></figure><p><code>mWindow</code>是一个<code>Window</code>类，查看源码在<code>Activity</code>的<code>attach</code>方法中<code>mWindow</code>被赋值：</p><blockquote><p>android.app.Activity</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context, ActivityThread aThread,</span></span></span><br><span class="line"><span class="params"><span class="function">            Instrumentation instr, IBinder token, <span class="keyword">int</span> ident,</span></span></span><br><span class="line"><span class="params"><span class="function">            Application application, Intent intent, ActivityInfo info,</span></span></span><br><span class="line"><span class="params"><span class="function">            CharSequence title, Activity parent, String id,</span></span></span><br><span class="line"><span class="params"><span class="function">            NonConfigurationInstances lastNonConfigurationInstances,</span></span></span><br><span class="line"><span class="params"><span class="function">            Configuration config, String referrer, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="params"><span class="function">            Window window, ActivityConfigCallback activityConfigCallback, IBinder assistToken,</span></span></span><br><span class="line"><span class="params"><span class="function">            IBinder shareableActivityToken)</span> </span>&#123;</span><br><span class="line">        attachBaseContext(context);</span><br><span class="line"></span><br><span class="line">        mFragments.attachHost(<span class="keyword">null</span> <span class="comment">/*parent*/</span>);</span><br><span class="line"></span><br><span class="line">        mWindow = <span class="keyword">new</span> PhoneWindow(<span class="keyword">this</span>, window, activityConfigCallback);</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>看到这里，我们知道<code>Activity</code>的<code>setContentView</code>最终调用的是<code>PhoneWindow</code>的<code>setContentView</code>方法，我们继续看<code>PhoneWindow</code>的<code>setContentView</code>方法：</p><blockquote><p>com.android.internal.policy.PhoneWindow</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        installDecor();<span class="comment">//1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">        mContentParent.removeAllViews();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">        <span class="keyword">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</span><br><span class="line">                getContext());</span><br><span class="line">        transitionTo(newScene);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mLayoutInflater.inflate(layoutResID, mContentParent);</span><br><span class="line">    &#125;</span><br><span class="line">    mContentParent.requestApplyInsets();</span><br><span class="line">    <span class="keyword">final</span> Callback cb = getCallback();</span><br><span class="line">    <span class="keyword">if</span> (cb != <span class="keyword">null</span> &amp;&amp; !isDestroyed()) &#123;</span><br><span class="line">        cb.onContentChanged();</span><br><span class="line">    &#125;</span><br><span class="line">    mContentParentExplicitlySet = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看注释1处的<code>installDecor</code>方法：</p><blockquote><p>com.android.internal.policy.PhoneWindow</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installDecor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mForceDecorInstall = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (mDecor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mDecor = generateDecor(-<span class="number">1</span>);<span class="comment">//1</span></span><br><span class="line">            mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);</span><br><span class="line">            mDecor.setIsRootNamespace(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (!mInvalidatePanelMenuPosted &amp;&amp; mInvalidatePanelMenuFeatures != <span class="number">0</span>) &#123;</span><br><span class="line">                mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mDecor.setWindow(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mContentParent = generateLayout(mDecor);<span class="comment">//2</span></span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><p>看注释1处的<code>generateDecor</code>方法：</p><blockquote><p>com.android.internal.policy.PhoneWindow</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> DecorView <span class="title">generateDecor</span><span class="params">(<span class="keyword">int</span> featureId)</span> </span>&#123;</span><br><span class="line">    Context context;</span><br><span class="line">    <span class="keyword">if</span> (mUseDecorContext) &#123;</span><br><span class="line">        Context applicationContext = getContext().getApplicationContext();</span><br><span class="line">        <span class="keyword">if</span> (applicationContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">            context = getContext();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context = <span class="keyword">new</span> DecorContext(applicationContext, <span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (mTheme != -<span class="number">1</span>) &#123;</span><br><span class="line">                context.setTheme(mTheme);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context = getContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DecorView(context, featureId, <span class="keyword">this</span>, getAttributes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>generateDecor</code>最终<code>new</code>了一个<code>DecorView</code>对象，并把该对象返回并赋值给<code>installDecor</code>方法中的<code>mDecor</code>引用。</p><p>返回到<code>installDecor</code>方法继续看注释2的<code>generateLayout</code>方法：</p><blockquote><p>com.android.internal.policy.PhoneWindow</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ViewGroup <span class="title">generateLayout</span><span class="params">(DecorView decor)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">int</span> layoutResource;</span><br><span class="line">    ...</span><br><span class="line">    layoutResource = R.layout.screen_title;</span><br><span class="line">    ...</span><br><span class="line">    mDecor.onResourcesLoaded(mLayoutInflater, layoutResource);</span><br><span class="line">    ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> contentParent;</span><br></pre></td></tr></table></figure><p>由于<code>generateLayout</code>的代码很长，此处只贴出关键的代码。<code>generateLayout</code>的主要工作是将系统中的<code>R.layout.screen_title</code>布局资源添加到<code>DecorView</code>中，然后在<code>PhoneWindow</code>中调用<code>findViewById(ID_ANDROID_CONTENT)</code>，找到<code>R.layout.screen_title</code>中<code>id</code>为<code>ID_ANDROID_CONTENT</code>的<code>FrameLayout</code>，并返回给<code>installDecor</code>方法中的<code>mContentParent</code>引用。<br><code>R.layout.screen_title</code>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Popout bar for action modes --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ViewStub</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/action_mode_bar_stub&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:inflatedId</span>=<span class="string">&quot;@+id/action_mode_bar&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout</span>=<span class="string">&quot;@layout/action_mode_bar&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:theme</span>=<span class="string">&quot;?attr/actionBarTheme&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;?android:attr/windowTitleSize&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;?android:attr/windowTitleBackgroundStyle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/title&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;?android:attr/windowTitleStyle&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@null&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:fadingEdge</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;0dip&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:foregroundGravity</span>=<span class="string">&quot;fill_horizontal|top&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:foreground</span>=<span class="string">&quot;?android:attr/windowContentOverlay&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意最下面的<code>FrameLayout</code>的<code>id</code>是为：<code>content</code>，再看源码中的<code>ID_ANDROID_CONTENT</code>的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ID_ANDROID_CONTENT = com.android.internal.R.id.content;</span><br></pre></td></tr></table></figure><p>最后再回到<code>PhoneWindow</code>的<code>setContentView</code>方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        installDecor();<span class="comment">//1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">        mContentParent.removeAllViews();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">        <span class="keyword">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</span><br><span class="line">                getContext());</span><br><span class="line">        transitionTo(newScene);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mLayoutInflater.inflate(layoutResID, mContentParent);<span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">    mContentParent.requestApplyInsets();</span><br><span class="line">    <span class="keyword">final</span> Callback cb = getCallback();</span><br><span class="line">    <span class="keyword">if</span> (cb != <span class="keyword">null</span> &amp;&amp; !isDestroyed()) &#123;</span><br><span class="line">        cb.onContentChanged();</span><br><span class="line">    &#125;</span><br><span class="line">    mContentParentExplicitlySet = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1处的代码之前已经讲完了，然后看注释2处的代码，这句代码就是将<code>setContentView</code>传入的布局资源<code>id</code>加载到<code>mContentParent</code>，而<code>mContentParent</code>就是之前讲过的<code>id</code>为<code>content</code>的<code>FrameLayout</code>。</p><p>至此一个<code>Activity</code>的结构也清楚了，结构如下图所示：</p><p><img src="https://pic.imgdb.cn/item/61efb07a2ab3f51d915e2ede.jpg"></p><p><code>Activity</code>中包含一个<code>PhoneWindow</code>，<code>PhoneWindow</code>中包含一个<code>DecorView</code>，<code>DecorView</code>中包含系统的布局资源<code>R.layout.screen_title</code>。而<code>setContentView</code>就是将在<code>Activity</code>中传入的布局资源文件加载到<code>id</code>为<code>content</code>的<code>FrameLayout</code>中。</p><blockquote><p><strong>关注我</strong></p><ul><li>掘金：<a href="https://juejin.cn/user/2365804752143256">droidYu</a></li><li>CSDN：<a href="https://blog.csdn.net/u010444082">droidYu</a></li><li>Github：<a href="https://github.com/droidYu">droidYu</a></li><li>个人博客：<a href="https://droidyu.github.io/">droidYu</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> View体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View体系 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>View体系（四）深入理解事件分发机制</title>
      <link href="/android/view/4-event-2/"/>
      <url>/android/view/4-event-2/</url>
      
        <content type="html"><![CDATA[<p>上篇文章<a href="https://droidyu.github.io/android/view/3-event/">《View体系（三）初探View事件分发机制》</a>对View的事件分发机制进行了粗略的讲解，并用代码实际探究了View事件的传递和处理过程。这篇文章就对View的事件分发机制进行一个更深入的讲解。<br>之前提到过事件分发机制中的三个方法：<code>dispatchTouchEvent(MotionEvent event)</code>、<code>onInterceptTouchEvent(MotionEvent ev)</code>和<code>onTouchEvent(MotionEvent event)</code>，那么这三个方法到底有什么样的关联呢？他们的关系其实可以用如下的伪代码表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (onInterceptTouchEvent(event)) &#123;</span><br><span class="line">        result = onTouchEvent(event);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = child.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="事件由上到下的传递规则"><a href="#事件由上到下的传递规则" class="headerlink" title="事件由上到下的传递规则"></a>事件由上到下的传递规则</h1><p>对于根<code>ViewGroup</code>，事件首先传递给它的<code>dispatchTouchEvent()</code>方法，如果该<code>ViewGroup</code>的<code>onInterceptTouchEvent()</code>方法返回<code>true</code>，则表示它要拦截这个事件，这个事件就会交给它的<code>onTouchEvent()</code>方法处理，如果<code>onInterceptTouchEvent()</code>方法返回<code>false</code>，则表示它不拦截这个事件，则交给它的子元素的<code>dispatchTouchEvent()</code>来处理，如此的反复下去。如果传递给最底层的<code>View</code>，<code>View</code>是没有子<code>View</code>的，就会调用<code>View</code>的<code>dispatchTouchEvent()</code>方法，一般情况下最终会调用<code>View</code>的<code>onTouchEvent()</code>方法。</p><p>类比生活中的场景：假如你只是公司的基层员工(<code>View</code>),部门经理(父<code>ViewGroup</code>)通常会将事情(<code>MotionEvent</code>)安排给项目经理(子<code>ViewGroup</code>)，项目经理再将事情安排给你。如果项目经理觉得他自己就能处理部门经理安排的事情，他就会把事情拦截(<code>onInterceptTouchEvent</code>)，然后自己处理(<code>onTouchEvent</code>)，不再安排给你处理。</p><h1 id="事件由下而上的传递规则"><a href="#事件由下而上的传递规则" class="headerlink" title="事件由下而上的传递规则"></a>事件由下而上的传递规则</h1><p>事件传给最底层的<code>View</code>，如果他的<code>onTouchEvent()</code>方法返回<code>true</code>，则事件由最底层的<code>View</code>处理并消耗了，如果返回<code>false</code>则表示该<code>View</code>不消耗此次事件，则继续向上传递给父<code>View</code>的<code>onTouchEvent()</code>处理，如果父<code>View</code>的<code>onTouchEvent()</code>仍旧返回<code>false</code>，则继续向上传递给该父<code>View</code>的父<code>View</code>的<code>onTouchEvent()</code>处理，如此的反复下去。</p><p>同样类比上述场景：你把事情处理好了(<code>onTouchEvent</code>返回<code>true</code>)，那么事情就完结了；如果你处理不了(<code>onTouchEvent</code>返回<code>false</code>)，就需要上交给项目经理处理(传递给子<code>ViewGroup</code>的<code>onTouchEvent</code>)，如果项目经理也处理不了，就需要再向上交给部门经理处理(传递给父<code>ViewGroup</code>的<code>onTouchEvent</code>)。</p><blockquote><p><strong>关注我</strong></p><ul><li>掘金：<a href="https://juejin.cn/user/2365804752143256">droidYu</a></li><li>CSDN：<a href="https://blog.csdn.net/u010444082">droidYu</a></li><li>Github：<a href="https://github.com/droidYu">droidYu</a></li><li>个人博客：<a href="https://droidyu.github.io/">droidYu</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> View体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View体系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>View体系（三）初探View事件分发机制</title>
      <link href="/android/view/3-event/"/>
      <url>/android/view/3-event/</url>
      
        <content type="html"><![CDATA[<p>事件分发机制，简而言之就是Android对触摸事件的一系列传递和处理的机制。在了解分发机制之前需要对下面三个方法有个大概的了解：</p><ul><li><code>public boolean dispatchTouchEvent(MotionEvent event)</code></li></ul><p>用来进行事件的分发。如果有事件传递给当前<code>View</code>，那么此方法一定会被调用。返回值受当前View的<code>onTouchEvent(MotionEvent event)</code>和子<code>View</code>的<code>dispatchTouchEvent(MotionEvent event)</code>方法的影响，表示是否消耗当前事件。</p><ul><li><code>public boolean onInterceptTouchEvent(MotionEvent ev)</code></li></ul><p>用来判断是否拦截事件，返回值表示是否拦截当前事件。</p><ul><li><code>public boolean onTouchEvent(MotionEvent event)</code></li></ul><p>用来处理事件，返回值表示是否消耗当前事件，如果不消耗，则在同一事件序列中，当前<code>View</code>无法再次接收到事件。</p><p>我们知道Android的<code>View</code>结构是树状结构的，<code>View</code>可以放在一个<code>ViewGroup</code>里，这个<code>ViewGroup</code>又可以放在一个<code>ViewGroup</code>里，那么当我们点击一个嵌套的结构，事件传递是怎样的呢？<br>为此，我们用代码来实现一下。</p><p>1.创建<code>BaseViewGroup</code>作为底层<code>ViewGroup</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseViewGroup</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseViewGroup</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;ViewEvent&quot;</span>, <span class="string">&quot;BaseViewGroup-dispatchTouchEvent-&quot;</span>+ev.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;ViewEvent&quot;</span>, <span class="string">&quot;BaseViewGroup-onInterceptTouchEvent-&quot;</span>+ev.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;ViewEvent&quot;</span>, <span class="string">&quot;BaseViewGroup-onTouchEvent-&quot;</span>+event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建<code>TopViewGroup</code>作为顶层<code>ViewGroup</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopViewGroup</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TopViewGroup</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;ViewEvent&quot;</span>, <span class="string">&quot;TopViewGroup-dispatchTouchEvent-&quot;</span>+ev.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;ViewEvent&quot;</span>, <span class="string">&quot;TopViewGroup-onInterceptTouchEvent-&quot;</span>+ev.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;ViewEvent&quot;</span>, <span class="string">&quot;TopViewGroup-onTouchEvent-&quot;</span>+event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建<code>MyView</code>作为最上层的<code>View</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;ViewEvent&quot;</span>, <span class="string">&quot;MyView-dispatchTouchEvent-&quot;</span>+ev.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;ViewEvent&quot;</span>, <span class="string">&quot;MyView-onTouchEvent-&quot;</span>+event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.布局自定义<code>View</code>及<code>ViewGroup</code>，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">com.droidyu.viewsystem._3_event.BaseViewGroup</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;400dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;400dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#1f1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;._3_event.ViewEventActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.droidyu.viewsystem._3_event.TopViewGroup</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ff1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;300dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;300dp&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.droidyu.viewsystem._3_event.MyView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#f11&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.droidyu.viewsystem._3_event.TopViewGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.droidyu.viewsystem._3_event.BaseViewGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终，视图结构如下所示：<br><img src="https://pic.imgdb.cn/item/61f3e5de2ab3f51d91264e07.png"></p><p>运行程序，点击红色的<code>MyView</code>，然后查看<code>Log</code>日志如下：<br><img src="https://pic.imgdb.cn/item/61f3efef2ab3f51d9131f00c.jpg"><br>从<code>Log</code>日志可以看出，正常情况下，<br>事件的传递顺序是：<br><code>BaseViewGroup</code> -&gt; <code>TopViewGroup</code> -&gt; <code>MyView</code> 的<code>dispatchTouchEvent</code>和<code>onInterceptTouchEvent</code>方法<br>事件处理顺序是：<br><code>MyView</code> -&gt; <code>TopViewGroup</code> -&gt; <code>BaseViewGroup</code> 的<code>onTouchEvent</code>方法</p><p>此时将<code>BaseViewGroup</code>的<code>onInterceptTouchEvent</code>返回值改为<code>true</code>，再次点击红色的<code>MyView</code>，然后查看<code>Log</code>日志如下：<br><img src="https://pic.imgdb.cn/item/61f3f0262ab3f51d91323696.jpg"><br>从<code>Log</code>日志可以看出，<code>BaseViewGroup</code>拦截事件之后，就直接处理事件，不会再将事件向子<code>View</code>传递。</p><p>还原代码，将<code>TopViewGroup</code>的<code>onInterceptTouchEvent</code>返回值改为<code>true</code>，再次点击红色的<code>MyView</code>，然后查看<code>Log</code>日志如下：<br><img src="https://pic.imgdb.cn/item/61f3f04c2ab3f51d913266fb.jpg"><br>从<code>Log</code>日志可以看出，事件从<code>BaseViewGroup</code>传递到<code>TopViewGroup</code>，<code>TopViewGroup</code>拦截事件之后，就直接处理事件，不会再将事件向子<code>View</code>传递，处理后会不消耗，返回给<code>BaseViewGroup</code>再处理。</p><p>还原代码，将<code>MyView</code>的<code>onTouchEvent</code>返回值改为<code>true</code>，再次点击红色的<code>MyView</code>，然后查看<code>Log</code>日志如下：<br><img src="https://pic.imgdb.cn/item/61f3f0952ab3f51d9132c2af.jpg"><br>从<code>Log</code>日志可以看出，事件传递到<code>MyView</code>，<code>MyView</code>处理事件之后，就不再向上传递。</p><p>还原代码，将<code>TopViewGroup</code>的<code>onTouchEvent</code>返回值改为<code>true</code>，再次点击红色的<code>MyView</code>，然后查看<code>Log</code>日志如下：<br><img src="https://pic.imgdb.cn/item/61f3f0e62ab3f51d913323f9.jpg"><br>从<code>Log</code>日志可以看出，事件传递到<code>MyView</code>，<code>MyView</code>处理事件之后，又向上传递到<code>TopViewGroup</code>处理，<code>TopViewGroup</code>处理事件之后，就不再向上传递。</p><p>至此相信你对<code>View</code>的事件传递和处理有了一个更直观的认识，更多的讲解将在后续文章中更新，敬请期待。。。</p><p>源码见<a href="https://github.com/droidYu/view-system">Github</a></p><blockquote><p><strong>关注我</strong></p><ul><li>掘金：<a href="https://juejin.cn/user/2365804752143256">droidYu</a></li><li>CSDN：<a href="https://blog.csdn.net/u010444082">droidYu</a></li><li>Github：<a href="https://github.com/droidYu">droidYu</a></li><li>个人博客：<a href="https://droidyu.github.io/">droidYu</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> View体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View体系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>View体系（二）View滑动的六种方式</title>
      <link href="/android/view/2-scroll/"/>
      <url>/android/view/2-scroll/</url>
      
        <content type="html"><![CDATA[<p>在日常开发中，有时会遇到需要对View进行滑动处理的情况，今天我们就一起来看一下如何实现View的滑动。</p><p>不管采用什么方式，实现思路基本是一致的：当触摸到View时，记下当前触摸点的坐标；当手指移动时，记下移动后触摸点的坐标，然后用两个坐标算出移动的偏移量，再利用偏移量来修改View的坐标。</p><p>下面分别来讲解实现View滑动的6种方式。</p><h1 id="一、layout"><a href="#一、layout" class="headerlink" title="一、layout()"></a>一、layout()</h1><p><code>layout()</code>方法是View在进行布局流程时调用的一个方法，我们可以在移动View时调用次方法，不断的进行View的布局，达到滑动View的目的。具体过程如下：</p><p>（1）先自定义一个View，重写<code>onTouchEvent(MotionEvent event)</code>方法，在<code>ACTION_DOWN</code>时获取按下时的坐标。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">    <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.getActionMasked()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            lastX = x;</span><br><span class="line">            lastY = y;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><p>（2）在手指移动时，计算偏移量并调用<code>layout()</code>方法进行重新布局。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="keyword">int</span> offsetX = x - lastX;</span><br><span class="line">                <span class="keyword">int</span> offsetY = y - lastY;</span><br><span class="line">                way1(offsetX, offsetY);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>其中<code>way1()</code>方法的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">way1</span><span class="params">(<span class="keyword">int</span> offsetX, <span class="keyword">int</span> offsetY)</span> </span>&#123;</span><br><span class="line">    layout(getLeft() + offsetX,</span><br><span class="line">            getTop() + offsetY,</span><br><span class="line">            getRight() + offsetX,</span><br><span class="line">            getBottom() + offsetY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、offsetLeftAndRight-与offsetTopAndBottom"><a href="#二、offsetLeftAndRight-与offsetTopAndBottom" class="headerlink" title="二、offsetLeftAndRight()与offsetTopAndBottom()"></a>二、offsetLeftAndRight()与offsetTopAndBottom()</h1><p>这两个方法的使用与效果和<code>layout()</code>方法差不多，将<code>ACTION_MOVE</code>中的代码替换为<code>way2()</code>即可，其中<code>way2()</code>定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">way2</span><span class="params">(<span class="keyword">int</span> offsetX, <span class="keyword">int</span> offsetY)</span> </span>&#123;</span><br><span class="line">    offsetLeftAndRight(offsetX);</span><br><span class="line">    offsetTopAndBottom(offsetY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、LayoutParams"><a href="#三、LayoutParams" class="headerlink" title="三、LayoutParams"></a>三、LayoutParams</h1><p><code>LayoutParams</code>保存了View的布局参数，因此我们可以通过改变布局参数的值来改变View的位置。将<code>ACTION_MOVE</code>中的代码替换为<code>way3_1()</code>即可，其中<code>way3_1()</code>定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">way3_1</span><span class="params">(<span class="keyword">int</span> offsetX, <span class="keyword">int</span> offsetY)</span> </span>&#123;</span><br><span class="line">    LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) getLayoutParams();</span><br><span class="line">    layoutParams.leftMargin = getLeft() + offsetX;</span><br><span class="line">    layoutParams.topMargin = getTop() + offsetY;</span><br><span class="line">    setLayoutParams(layoutParams);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为父控件是<code>LinearLayout</code>，所以用了<code>LinearLayout.LayoutParams</code>，除了使用布局的<code>LayoutParams</code>，还可以使用<code>ViewGroup.MarginLayoutParams</code>来改变View的位置。将<code>ACTION_MOVE</code>中的代码替换为<code>way3_2()</code>即可，其中<code>way3_2()</code>定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">way3_2</span><span class="params">(<span class="keyword">int</span> offsetX, <span class="keyword">int</span> offsetY)</span> </span>&#123;</span><br><span class="line">    ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) getLayoutParams();</span><br><span class="line">    layoutParams.leftMargin = getLeft() + offsetX;</span><br><span class="line">    layoutParams.topMargin = getTop() + offsetY;</span><br><span class="line">    setLayoutParams(layoutParams);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、scrollTo与scrollBy"><a href="#四、scrollTo与scrollBy" class="headerlink" title="四、scrollTo与scrollBy"></a>四、scrollTo与scrollBy</h1><p><code>scollTo(x,y)</code>表示移动到一个具体的坐标点，而<code>scollBy(dx,dy)</code>则表示移动的增量为<code>dx</code>、<code>dy</code>。其中<code>scollBy</code>最终也是要调用<code>scollTo</code>的。<code>scollTo</code>、<code>scollBy</code>移动的是View的内容，如果在ViewGroup中使用则是移动他所有的子View。将<code>ACTION_MOVE</code>中的代码替换为<code>way4()</code>即可，其中<code>way4()</code>定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">way4</span><span class="params">(<span class="keyword">int</span> offsetX, <span class="keyword">int</span> offsetY)</span> </span>&#123;</span><br><span class="line">    ((View) getParent()).scrollBy(-offsetX, -offsetY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要实现View随着我们手指移动的效果的话，我们就需要将偏移量设置为负值。</p><h1 id="五、Scroller"><a href="#五、Scroller" class="headerlink" title="五、Scroller"></a>五、Scroller</h1><p><code>Scroller</code>本身是不能实现View的滑动的，它需要配合View的<code>computeScroll()</code>方法才能弹性滑动的效果。</p><h2 id="（1）初始化Scroller"><a href="#（1）初始化Scroller" class="headerlink" title="（1）初始化Scroller"></a>（1）初始化<code>Scroller</code></h2><p>在构造函数中初始化<code>Scroller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyScrollView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    scroller = <span class="keyword">new</span> Scroller(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（2）重写computeScroll"><a href="#（2）重写computeScroll" class="headerlink" title="（2）重写computeScroll()"></a>（2）重写<code>computeScroll()</code></h2><p>系统会在绘制View的时候在<code>draw()</code>方法中调用该方法，这个方法中我们调用父类的<code>scrollTo()</code>方法并通过<code>Scroller</code>来不断获取当前的滚动值，每滑动一小段距离我们就调用<code>invalidate()</code>方法不断的进行重绘，重绘就会调用<code>computeScroll()</code>方法，这样我们就通过不断的移动一个小的距离并连贯起来就实现了平滑移动的效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.computeScroll();</span><br><span class="line">    <span class="keyword">if</span> (scroller.computeScrollOffset()) &#123;</span><br><span class="line">        ((View) getParent()).scrollTo(scroller.getCurrX(), scroller.getCurrY());</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（3）调用Scroller-startScroll-方法"><a href="#（3）调用Scroller-startScroll-方法" class="headerlink" title="（3）调用Scroller.startScroll()方法"></a>（3）调用<code>Scroller.startScroll()</code>方法</h2><p>我们在<code>MyScrollView</code>中写一个<code>smoothScrollTo()</code>方法，调用<code>Scroller.startScroll()</code>方法，在<code>2000</code>毫秒内沿X轴和Y轴移动x和y个像素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoothScrollTo</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> scrollX = getScrollX();</span><br><span class="line">    <span class="keyword">int</span> scrollY = getScrollY();</span><br><span class="line">    <span class="keyword">int</span> offsetX = scrollX - x;</span><br><span class="line">    <span class="keyword">int</span> offsetY = scrollY - y;</span><br><span class="line">    scroller.startScroll(scrollX, scrollY, offsetX, offsetY, <span class="number">2000</span>);</span><br><span class="line">    invalidate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（4）调用MyScrollView的smoothScrollTo-方法"><a href="#（4）调用MyScrollView的smoothScrollTo-方法" class="headerlink" title="（4）调用MyScrollView的smoothScrollTo()方法"></a>（4）调用<code>MyScrollView</code>的<code>smoothScrollTo()</code>方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.smoothScrollTo(<span class="number">200</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><h1 id="六、属性动画"><a href="#六、属性动画" class="headerlink" title="六、属性动画"></a>六、属性动画</h1><p>最后就是定义一个属性动画进行View的滑动，属性动画的具体使用将放在后续章节中进行讲解，这里直接贴出实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator animator = ObjectAnimator.ofFloat(view, <span class="string">&quot;translationX&quot;</span>, <span class="number">400</span>);</span><br><span class="line">animator.setDuration(<span class="number">2000</span>);</span><br><span class="line">animator.start();</span><br></pre></td></tr></table></figure><p>源码见<a href="https://github.com/droidYu/view-system/tree/main/app/src/main/java/com/droidyu/viewsystem/_2_scroll">Github</a></p><p>参考文献：<br>《Android进阶之光》<br>《Android开发艺术探索》</p><blockquote><p><strong>关注我</strong></p><ul><li>掘金：<a href="https://juejin.cn/user/2365804752143256">droidYu</a></li><li>CSDN：<a href="https://blog.csdn.net/u010444082">droidYu</a></li><li>Github：<a href="https://github.com/droidYu">droidYu</a></li><li>个人博客：<a href="https://droidyu.github.io/">droidYu</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> View体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View体系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>View体系（一）基础知识</title>
      <link href="/android/view/1-basic/"/>
      <url>/android/view/1-basic/</url>
      
        <content type="html"><![CDATA[<h1 id="View-及ViewGroup"><a href="#View-及ViewGroup" class="headerlink" title="View 及ViewGroup"></a>View 及ViewGroup</h1><p>在Android中，常用控件可大致分为两大类：<code>View</code>与<code>ViewGroup</code>。<code>ViewGroup</code>可包含多个<code>View</code>及<code>ViewGroup</code>，形成一个树状结构。需要注意的是<code>ViewGroup</code>也继承自<code>View</code>。View及ViewGroup组织结构如下：<br><img src="https://pic.imgdb.cn/item/61f22a542ab3f51d91780c5e.png"></p><h1 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h1><p>在Android中有两种坐标系：Android坐标系和View坐标系。了解坐标系是对View进行更多操作的基础。</p><h2 id="Android坐标系"><a href="#Android坐标系" class="headerlink" title="Android坐标系"></a>Android坐标系</h2><p>以屏幕左上角为原点，原点向右为<code>X</code>轴正方向，原点向下为<code>Y</code>轴正方向。在触控事件中，<code>getRawX()</code>、<code>getRawY()</code>获取的坐标也是Android坐标系的坐标。</p><p><img src="https://pic.imgdb.cn/item/61efa6722ab3f51d91557262.jpg"></p><h2 id="View坐标系"><a href="#View坐标系" class="headerlink" title="View坐标系"></a>View坐标系</h2><p>View坐标系是以View为基础的坐标系，搞清楚下图的关系也就清楚了View坐标系。<br><img src="https://pic.imgdb.cn/item/61efa6802ab3f51d91557ee0.jpg"></p><p>下面解释一下上图中涉及到的各个方法。<br>其中下面4个方法可在View中直接获取：</p><ul><li><code>getTop()</code>：获取View顶边到父View顶边的距离</li><li><code>getBottom()</code>：获取View底边到父View顶边的距离</li><li><code>getLeft()</code>：获取View左边到父View左边的距离</li><li><code>getRight()</code>：获取View右边到父View左边的距离</li></ul><p>剩余4个方法需要在View有触摸事件发生时，通过onTouchEvent(MotionEvent event)方法中的event获取：</p><ul><li><code>getX()</code>：触摸点到View左边的距离</li><li><code>getY()</code>：触摸点到View顶边的距离</li><li><code>getRawX()</code>：触摸点到屏幕左边的距离</li><li><code>getRawY()</code>：触摸点到屏幕顶边的距离</li></ul><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> top = getTop();</span><br><span class="line">    <span class="keyword">int</span> bottom = getBottom();</span><br><span class="line">    <span class="keyword">int</span> left = getLeft();</span><br><span class="line">    <span class="keyword">int</span> right = getRight();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> x = event.getX();</span><br><span class="line">        <span class="keyword">float</span> y = event.getY();</span><br><span class="line">        <span class="keyword">float</span> rawX = event.getRawX();</span><br><span class="line">        <span class="keyword">float</span> rawY = event.getRawY();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码见<a href="https://github.com/droidYu/view-system/tree/main/app/src/main/java/com/droidyu/viewsystem/_1_basic">Github</a></p><p>参考文献：<br>《Android进阶之光》<br>《Android开发艺术探索》</p><blockquote><p><strong>关注我</strong></p><ul><li>掘金：<a href="https://juejin.cn/user/2365804752143256">droidYu</a></li><li>CSDN：<a href="https://blog.csdn.net/u010444082">droidYu</a></li><li>Github：<a href="https://github.com/droidYu">droidYu</a></li><li>个人博客：<a href="https://droidyu.github.io/">droidYu</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> View体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View体系 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
